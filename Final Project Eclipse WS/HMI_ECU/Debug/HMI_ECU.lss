
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  000034a2  00003536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080015a  0080015a  00003630  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00003630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001473  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b868  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 36       	cpi	r26, 0x69	; 105
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e3       	ldi	r26, 0x3B	; 59
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e3       	ldi	r24, 0x3B	; 59
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *                               HMI ECU MAIN                                  *
 *******************************************************************************/


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	cd 54       	subi	r28, 0x4D	; 77
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	    UART_Config.baud_rate= 9600;
		UART_Config.bit_data = EIGHT_BIT_FRAME;
		UART_Config.parity= DISABLE_PARITY;
		UART_Config.stop_bit=ONE_STOP_BIT;
	 */
	UART_ConfigType config_UART = {EIGHT_BIT_FRAME, DISABLE_PARITY, ONE_STOP_BIT, 9600};
     b5c:	ce 01       	movw	r24, r28
     b5e:	8e 96       	adiw	r24, 0x2e	; 46
     b60:	21 96       	adiw	r28, 0x01	; 1
     b62:	9f af       	std	Y+63, r25	; 0x3f
     b64:	8e af       	std	Y+62, r24	; 0x3e
     b66:	21 97       	sbiw	r28, 0x01	; 1
     b68:	e5 e5       	ldi	r30, 0x55	; 85
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	23 96       	adiw	r28, 0x03	; 3
     b6e:	ff af       	std	Y+63, r31	; 0x3f
     b70:	ee af       	std	Y+62, r30	; 0x3e
     b72:	23 97       	sbiw	r28, 0x03	; 3
     b74:	f5 e0       	ldi	r31, 0x05	; 5
     b76:	24 96       	adiw	r28, 0x04	; 4
     b78:	ff af       	std	Y+63, r31	; 0x3f
     b7a:	24 97       	sbiw	r28, 0x04	; 4
     b7c:	23 96       	adiw	r28, 0x03	; 3
     b7e:	ee ad       	ldd	r30, Y+62	; 0x3e
     b80:	ff ad       	ldd	r31, Y+63	; 0x3f
     b82:	23 97       	sbiw	r28, 0x03	; 3
     b84:	00 80       	ld	r0, Z
     b86:	23 96       	adiw	r28, 0x03	; 3
     b88:	8e ad       	ldd	r24, Y+62	; 0x3e
     b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
     b8c:	23 97       	sbiw	r28, 0x03	; 3
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	23 96       	adiw	r28, 0x03	; 3
     b92:	9f af       	std	Y+63, r25	; 0x3f
     b94:	8e af       	std	Y+62, r24	; 0x3e
     b96:	23 97       	sbiw	r28, 0x03	; 3
     b98:	21 96       	adiw	r28, 0x01	; 1
     b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9e:	21 97       	sbiw	r28, 0x01	; 1
     ba0:	00 82       	st	Z, r0
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba8:	21 97       	sbiw	r28, 0x01	; 1
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	21 96       	adiw	r28, 0x01	; 1
     bae:	9f af       	std	Y+63, r25	; 0x3f
     bb0:	8e af       	std	Y+62, r24	; 0x3e
     bb2:	21 97       	sbiw	r28, 0x01	; 1
     bb4:	24 96       	adiw	r28, 0x04	; 4
     bb6:	9f ad       	ldd	r25, Y+63	; 0x3f
     bb8:	24 97       	sbiw	r28, 0x04	; 4
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	24 96       	adiw	r28, 0x04	; 4
     bbe:	9f af       	std	Y+63, r25	; 0x3f
     bc0:	24 97       	sbiw	r28, 0x04	; 4
     bc2:	24 96       	adiw	r28, 0x04	; 4
     bc4:	ef ad       	ldd	r30, Y+63	; 0x3f
     bc6:	24 97       	sbiw	r28, 0x04	; 4
     bc8:	ee 23       	and	r30, r30
     bca:	c1 f6       	brne	.-80     	; 0xb7c <main+0x36>
	g_Timer1Config.initial_value=0;      ----> value counter starts counting from
	g_Timer1Config.compare_value=46836;  ----> setting value of compare match register of timer1
	g_Timer1Config.mode=CTC_OCR1A;       ----> configure timer1 to work in compare mode using channel A
	g_Timer1Config.prescaler= F_CPU_64;  ----> use prescaler of 64
	 */
	Timer1_ConfigType Timer1_Config_Motor = {0,46875,F_CPU_64, CTC_OCR1A};
     bcc:	ce 01       	movw	r24, r28
     bce:	c3 96       	adiw	r24, 0x33	; 51
     bd0:	26 96       	adiw	r28, 0x06	; 6
     bd2:	9f af       	std	Y+63, r25	; 0x3f
     bd4:	8e af       	std	Y+62, r24	; 0x3e
     bd6:	26 97       	sbiw	r28, 0x06	; 6
     bd8:	ef e4       	ldi	r30, 0x4F	; 79
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	28 96       	adiw	r28, 0x08	; 8
     bde:	ff af       	std	Y+63, r31	; 0x3f
     be0:	ee af       	std	Y+62, r30	; 0x3e
     be2:	28 97       	sbiw	r28, 0x08	; 8
     be4:	f6 e0       	ldi	r31, 0x06	; 6
     be6:	29 96       	adiw	r28, 0x09	; 9
     be8:	ff af       	std	Y+63, r31	; 0x3f
     bea:	29 97       	sbiw	r28, 0x09	; 9
     bec:	28 96       	adiw	r28, 0x08	; 8
     bee:	ee ad       	ldd	r30, Y+62	; 0x3e
     bf0:	ff ad       	ldd	r31, Y+63	; 0x3f
     bf2:	28 97       	sbiw	r28, 0x08	; 8
     bf4:	00 80       	ld	r0, Z
     bf6:	28 96       	adiw	r28, 0x08	; 8
     bf8:	8e ad       	ldd	r24, Y+62	; 0x3e
     bfa:	9f ad       	ldd	r25, Y+63	; 0x3f
     bfc:	28 97       	sbiw	r28, 0x08	; 8
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	28 96       	adiw	r28, 0x08	; 8
     c02:	9f af       	std	Y+63, r25	; 0x3f
     c04:	8e af       	std	Y+62, r24	; 0x3e
     c06:	28 97       	sbiw	r28, 0x08	; 8
     c08:	26 96       	adiw	r28, 0x06	; 6
     c0a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c0c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c0e:	26 97       	sbiw	r28, 0x06	; 6
     c10:	00 82       	st	Z, r0
     c12:	26 96       	adiw	r28, 0x06	; 6
     c14:	8e ad       	ldd	r24, Y+62	; 0x3e
     c16:	9f ad       	ldd	r25, Y+63	; 0x3f
     c18:	26 97       	sbiw	r28, 0x06	; 6
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	26 96       	adiw	r28, 0x06	; 6
     c1e:	9f af       	std	Y+63, r25	; 0x3f
     c20:	8e af       	std	Y+62, r24	; 0x3e
     c22:	26 97       	sbiw	r28, 0x06	; 6
     c24:	29 96       	adiw	r28, 0x09	; 9
     c26:	9f ad       	ldd	r25, Y+63	; 0x3f
     c28:	29 97       	sbiw	r28, 0x09	; 9
     c2a:	91 50       	subi	r25, 0x01	; 1
     c2c:	29 96       	adiw	r28, 0x09	; 9
     c2e:	9f af       	std	Y+63, r25	; 0x3f
     c30:	29 97       	sbiw	r28, 0x09	; 9
     c32:	29 96       	adiw	r28, 0x09	; 9
     c34:	ef ad       	ldd	r30, Y+63	; 0x3f
     c36:	29 97       	sbiw	r28, 0x09	; 9
     c38:	ee 23       	and	r30, r30
     c3a:	c1 f6       	brne	.-80     	; 0xbec <main+0xa6>
	 g_Timer1Config.initial_value=0;      ----> value counter starts counting from
     g_Timer1Config.compare_value=58536;  ----> setting value of compare match register of timer1
	 g_Timer1Config.mode= CTC_OCR1A;      ----> configure timer1 to work in compare mode using channel A
	 g_Timer1Config.prescaler= F_CPU_1024;----> use prescaler of 1024
	 */
	Timer1_ConfigType Timer1_Config_Buzzer = {0,58536,F_CPU_1024,CTC_OCR1A};
     c3c:	ce 01       	movw	r24, r28
     c3e:	c9 96       	adiw	r24, 0x39	; 57
     c40:	2b 96       	adiw	r28, 0x0b	; 11
     c42:	9f af       	std	Y+63, r25	; 0x3f
     c44:	8e af       	std	Y+62, r24	; 0x3e
     c46:	2b 97       	sbiw	r28, 0x0b	; 11
     c48:	e9 e4       	ldi	r30, 0x49	; 73
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	2d 96       	adiw	r28, 0x0d	; 13
     c4e:	ff af       	std	Y+63, r31	; 0x3f
     c50:	ee af       	std	Y+62, r30	; 0x3e
     c52:	2d 97       	sbiw	r28, 0x0d	; 13
     c54:	f6 e0       	ldi	r31, 0x06	; 6
     c56:	2e 96       	adiw	r28, 0x0e	; 14
     c58:	ff af       	std	Y+63, r31	; 0x3f
     c5a:	2e 97       	sbiw	r28, 0x0e	; 14
     c5c:	2d 96       	adiw	r28, 0x0d	; 13
     c5e:	ee ad       	ldd	r30, Y+62	; 0x3e
     c60:	ff ad       	ldd	r31, Y+63	; 0x3f
     c62:	2d 97       	sbiw	r28, 0x0d	; 13
     c64:	00 80       	ld	r0, Z
     c66:	2d 96       	adiw	r28, 0x0d	; 13
     c68:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c6c:	2d 97       	sbiw	r28, 0x0d	; 13
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	2d 96       	adiw	r28, 0x0d	; 13
     c72:	9f af       	std	Y+63, r25	; 0x3f
     c74:	8e af       	std	Y+62, r24	; 0x3e
     c76:	2d 97       	sbiw	r28, 0x0d	; 13
     c78:	2b 96       	adiw	r28, 0x0b	; 11
     c7a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c7c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c7e:	2b 97       	sbiw	r28, 0x0b	; 11
     c80:	00 82       	st	Z, r0
     c82:	2b 96       	adiw	r28, 0x0b	; 11
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	2b 97       	sbiw	r28, 0x0b	; 11
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	2b 96       	adiw	r28, 0x0b	; 11
     c8e:	9f af       	std	Y+63, r25	; 0x3f
     c90:	8e af       	std	Y+62, r24	; 0x3e
     c92:	2b 97       	sbiw	r28, 0x0b	; 11
     c94:	2e 96       	adiw	r28, 0x0e	; 14
     c96:	9f ad       	ldd	r25, Y+63	; 0x3f
     c98:	2e 97       	sbiw	r28, 0x0e	; 14
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	2e 96       	adiw	r28, 0x0e	; 14
     c9e:	9f af       	std	Y+63, r25	; 0x3f
     ca0:	2e 97       	sbiw	r28, 0x0e	; 14
     ca2:	2e 96       	adiw	r28, 0x0e	; 14
     ca4:	ef ad       	ldd	r30, Y+63	; 0x3f
     ca6:	2e 97       	sbiw	r28, 0x0e	; 14
     ca8:	ee 23       	and	r30, r30
     caa:	c1 f6       	brne	.-80     	; 0xc5c <main+0x116>

	uint8 state = SETTING_NEW_PASSWORD; /* variable to carry which state to controllers are working in*/
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8d a7       	std	Y+45, r24	; 0x2d

	/* variable carrying result of comparing confirm password with new pass when setting new password
	 * and comparing entered password with one of the system when requesting to open the door or change password
	 */
	uint8 passwordsMatchFlag = WRONG_PASS;
     cb0:	1c a6       	std	Y+44, r1	; 0x2c

	uint8 g_enterPassMaxTrials = 0; /* variable to count number of consecutive wrong password entered by the user*/
     cb2:	1b a6       	std	Y+43, r1	; 0x2b


	/*enable lcd driver*/
	LCD_init();
     cb4:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_init>

	/*enable UART driver*/
	UART_init(&config_UART);
     cb8:	ce 01       	movw	r24, r28
     cba:	8e 96       	adiw	r24, 0x2e	; 46
     cbc:	0e 94 8a 18 	call	0x3114	; 0x3114 <UART_init>

	/*Enable global interrupt*/
	sei();
     cc0:	78 94       	sei
     cc2:	8a c0       	rjmp	.+276    	; 0xdd8 <main+0x292>
	{
		/* setting a password for the system or user requires changing password*/
		while((state == SETTING_NEW_PASSWORD) && (passwordsMatchFlag == WRONG_PASS))
		{
			/* entering two passwords and sending them to Control_ECU*/
			HMI_settingNewPassword();
     cc4:	0e 94 9e 08 	call	0x113c	; 0x113c <HMI_settingNewPassword>

			UART_sendByte(READY_TO_COMMUNICATE); /* informing Conrol_ECU to send data now*/
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
			passwordsMatchFlag=UART_receiveByte(); /* receive flag indicating if two passwords matched*/
     cce:	0e 94 36 19 	call	0x326c	; 0x326c <UART_receiveByte>
     cd2:	8c a7       	std	Y+44, r24	; 0x2c

			LCD_clearScreen();
     cd4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
			if(passwordsMatchFlag == MATCH)
     cd8:	8c a5       	ldd	r24, Y+44	; 0x2c
     cda:	85 30       	cpi	r24, 0x05	; 5
     cdc:	09 f4       	brne	.+2      	; 0xce0 <main+0x19a>
     cde:	7c c0       	rjmp	.+248    	; 0xdd8 <main+0x292>
			{
				/*Do Nothing*/
			}
			else
			{
				LCD_displayStringRowColumn(0,0, "Not matching");
     ce0:	20 e6       	ldi	r18, 0x60	; 96
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	a9 01       	movw	r20, r18
     cea:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
				state = SETTING_NEW_PASSWORD;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	8d a7       	std	Y+45, r24	; 0x2d
				passwordsMatchFlag = WRONG_PASS;
     cf2:	1c a6       	std	Y+44, r1	; 0x2c
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	aa ef       	ldi	r26, 0xFA	; 250
     cfa:	b3 e4       	ldi	r27, 0x43	; 67
     cfc:	8f a3       	std	Y+39, r24	; 0x27
     cfe:	98 a7       	std	Y+40, r25	; 0x28
     d00:	a9 a7       	std	Y+41, r26	; 0x29
     d02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	6f a1       	ldd	r22, Y+39	; 0x27
     d06:	78 a5       	ldd	r23, Y+40	; 0x28
     d08:	89 a5       	ldd	r24, Y+41	; 0x29
     d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4a e7       	ldi	r20, 0x7A	; 122
     d12:	53 e4       	ldi	r21, 0x43	; 67
     d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	8b a3       	std	Y+35, r24	; 0x23
     d1e:	9c a3       	std	Y+36, r25	; 0x24
     d20:	ad a3       	std	Y+37, r26	; 0x25
     d22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d24:	6b a1       	ldd	r22, Y+35	; 0x23
     d26:	7c a1       	ldd	r23, Y+36	; 0x24
     d28:	8d a1       	ldd	r24, Y+37	; 0x25
     d2a:	9e a1       	ldd	r25, Y+38	; 0x26
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <main+0x200>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9a a3       	std	Y+34, r25	; 0x22
     d42:	89 a3       	std	Y+33, r24	; 0x21
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <main+0x27e>
	else if (__tmp > 65535)
     d46:	6b a1       	ldd	r22, Y+35	; 0x23
     d48:	7c a1       	ldd	r23, Y+36	; 0x24
     d4a:	8d a1       	ldd	r24, Y+37	; 0x25
     d4c:	9e a1       	ldd	r25, Y+38	; 0x26
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	4c f5       	brge	.+82     	; 0xdb0 <main+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	6f a1       	ldd	r22, Y+39	; 0x27
     d60:	78 a5       	ldd	r23, Y+40	; 0x28
     d62:	89 a5       	ldd	r24, Y+41	; 0x29
     d64:	9a a5       	ldd	r25, Y+42	; 0x2a
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9a a3       	std	Y+34, r25	; 0x22
     d84:	89 a3       	std	Y+33, r24	; 0x21
     d86:	0f c0       	rjmp	.+30     	; 0xda6 <main+0x260>
     d88:	89 e1       	ldi	r24, 0x19	; 25
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	98 a3       	std	Y+32, r25	; 0x20
     d8e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d92:	98 a1       	ldd	r25, Y+32	; 0x20
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <main+0x24e>
     d98:	98 a3       	std	Y+32, r25	; 0x20
     d9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9c:	89 a1       	ldd	r24, Y+33	; 0x21
     d9e:	9a a1       	ldd	r25, Y+34	; 0x22
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9a a3       	std	Y+34, r25	; 0x22
     da4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	89 a1       	ldd	r24, Y+33	; 0x21
     da8:	9a a1       	ldd	r25, Y+34	; 0x22
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f7       	brne	.-38     	; 0xd88 <main+0x242>
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <main+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db0:	6b a1       	ldd	r22, Y+35	; 0x23
     db2:	7c a1       	ldd	r23, Y+36	; 0x24
     db4:	8d a1       	ldd	r24, Y+37	; 0x25
     db6:	9e a1       	ldd	r25, Y+38	; 0x26
     db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9a a3       	std	Y+34, r25	; 0x22
     dc2:	89 a3       	std	Y+33, r24	; 0x21
     dc4:	89 a1       	ldd	r24, Y+33	; 0x21
     dc6:	9a a1       	ldd	r25, Y+34	; 0x22
     dc8:	9e 8f       	std	Y+30, r25	; 0x1e
     dca:	8d 8f       	std	Y+29, r24	; 0x1d
     dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <main+0x28a>
     dd4:	9e 8f       	std	Y+30, r25	; 0x1e
     dd6:	8d 8f       	std	Y+29, r24	; 0x1d
	sei();

	while(1)
	{
		/* setting a password for the system or user requires changing password*/
		while((state == SETTING_NEW_PASSWORD) && (passwordsMatchFlag == WRONG_PASS))
     dd8:	8d a5       	ldd	r24, Y+45	; 0x2d
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	21 f4       	brne	.+8      	; 0xde6 <main+0x2a0>
     dde:	8c a5       	ldd	r24, Y+44	; 0x2c
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <main+0x2a0>
     de4:	6f cf       	rjmp	.-290    	; 0xcc4 <main+0x17e>

		/*After setting the new password the main menu starts to display
		 * press '+' --> the door will open for 15, stop for 3 sec and then close for 15 sec
		 * press '-'--> Change password
		 */
		state = HMI_mainOptions();
     de6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <HMI_mainOptions>
     dea:	8d a7       	std	Y+45, r24	; 0x2d

		if(state == STEP_3_OPEN_DOOR)
     dec:	8d a5       	ldd	r24, Y+45	; 0x2d
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	09 f0       	breq	.+2      	; 0xdf4 <main+0x2ae>
     df2:	e9 c0       	rjmp	.+466    	; 0xfc6 <main+0x480>
		{
			while(1)
			{
				passwordsMatchFlag = HMI_getPassword();
     df4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <HMI_getPassword>
     df8:	8c a7       	std	Y+44, r24	; 0x2c
				if(passwordsMatchFlag == MATCH)
     dfa:	8c a5       	ldd	r24, Y+44	; 0x2c
     dfc:	85 30       	cpi	r24, 0x05	; 5
     dfe:	b9 f5       	brne	.+110    	; 0xe6e <main+0x328>
				{

					/* start timer1 with the selected configuration */
					Timer1_init(&Timer1_Config_Motor);
     e00:	ce 01       	movw	r24, r28
     e02:	c3 96       	adiw	r24, 0x33	; 51
     e04:	0e 94 07 18 	call	0x300e	; 0x300e <Timer1_init>

					/*set call back function of timer1 */
					Timer1_setCallBack(Controling_LCD_openDoorState);
     e08:	8e e7       	ldi	r24, 0x7E	; 126
     e0a:	9d e0       	ldi	r25, 0x0D	; 13
     e0c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Timer1_setCallBack>

					g_enterPassMaxTrials = 0;
     e10:	1b a6       	std	Y+43, r1	; 0x2b

                    /* display door state on the LCD*/
					LCD_clearScreen();
     e12:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is opening ");
     e16:	2d e6       	ldi	r18, 0x6D	; 109
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	a9 01       	movw	r20, r18
     e20:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
					while(open_flag != 1);
     e24:	80 91 5c 01 	lds	r24, 0x015C
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <main+0x2de>

					//				stop_flag=0;
					LCD_displayStringRowColumn(0,0,"Door not moving");
     e2c:	2e e7       	ldi	r18, 0x7E	; 126
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	a9 01       	movw	r20, r18
     e36:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
					while(stop_flag != 1);
     e3a:	80 91 5d 01 	lds	r24, 0x015D
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x2f4>


					//				close_flag = 0;
					LCD_clearScreen();
     e42:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is closing");
     e46:	2e e8       	ldi	r18, 0x8E	; 142
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	a9 01       	movw	r20, r18
     e50:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
					while(close_flag != 1);
     e54:	80 91 5f 01 	lds	r24, 0x015F
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <main+0x30e>

					/*stop timer1 */
					Timer1_deInit();
     e5c:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Timer1_deInit>

					/* clear door controlling flags */
					open_flag = 0;
     e60:	10 92 5c 01 	sts	0x015C, r1
					close_flag = 0;
     e64:	10 92 5f 01 	sts	0x015F, r1
					stop_flag=0;
     e68:	10 92 5d 01 	sts	0x015D, r1
     e6c:	b5 cf       	rjmp	.-150    	; 0xdd8 <main+0x292>
					break; /* break from loop after entering password correctly and opening door*/

				}
				else if (passwordsMatchFlag == NOT_MATCHING)
     e6e:	8c a5       	ldd	r24, Y+44	; 0x2c
     e70:	86 30       	cpi	r24, 0x06	; 6
     e72:	09 f0       	breq	.+2      	; 0xe76 <main+0x330>
     e74:	bf cf       	rjmp	.-130    	; 0xdf4 <main+0x2ae>
				{
					g_enterPassMaxTrials++;
     e76:	8b a5       	ldd	r24, Y+43	; 0x2b
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	8b a7       	std	Y+43, r24	; 0x2b
					if(g_enterPassMaxTrials >= 3)
     e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	10 f1       	brcs	.+68     	; 0xec6 <main+0x380>
					{

						g_enterPassMaxTrials=0; /* clear counter of consecutive wrong passwords*/
     e82:	1b a6       	std	Y+43, r1	; 0x2b

						Timer1_setCallBack(HMI_errorLCDProcessing);
     e84:	83 ea       	ldi	r24, 0xA3	; 163
     e86:	9d e0       	ldi	r25, 0x0D	; 13
     e88:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Timer1_setCallBack>
						Timer1_init(&Timer1_Config_Buzzer);
     e8c:	ce 01       	movw	r24, r28
     e8e:	c9 96       	adiw	r24, 0x39	; 57
     e90:	0e 94 07 18 	call	0x300e	; 0x300e <Timer1_init>

						/*display error message*/
						LCD_clearScreen();
     e94:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"ERROR, please");
     e98:	2e e9       	ldi	r18, 0x9E	; 158
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"wait 1 min");
     ea6:	2c ea       	ldi	r18, 0xAC	; 172
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
						while(stop_buzzer != 1);
     eb4:	80 91 60 01 	lds	r24, 0x0160
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <main+0x36e>


						Timer1_deInit(); /*stop timer*/
     ebc:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Timer1_deInit>
						stop_buzzer = 0;
     ec0:	10 92 60 01 	sts	0x0160, r1
     ec4:	89 cf       	rjmp	.-238    	; 0xdd8 <main+0x292>
						break; /* break from the loop after setting alarm for 1 minute to go to main options again*/
					}
					else
					{
						LCD_displayStringRowColumn(0,0, "Incorrect Pass");
     ec6:	27 eb       	ldi	r18, 0xB7	; 183
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	a9 01       	movw	r20, r18
     ed0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>

						/*start communication with Control_ECU, to take password and check it from user again*/
						UART_sendByte(READY_TO_COMMUNICATE);
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
						UART_sendByte(STEP_3_OPEN_DOOR);
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	aa ef       	ldi	r26, 0xFA	; 250
     ee6:	b3 e4       	ldi	r27, 0x43	; 67
     ee8:	89 8f       	std	Y+25, r24	; 0x19
     eea:	9a 8f       	std	Y+26, r25	; 0x1a
     eec:	ab 8f       	std	Y+27, r26	; 0x1b
     eee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef0:	69 8d       	ldd	r22, Y+25	; 0x19
     ef2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	4a e7       	ldi	r20, 0x7A	; 122
     efe:	53 e4       	ldi	r21, 0x43	; 67
     f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	8d 8b       	std	Y+21, r24	; 0x15
     f0a:	9e 8b       	std	Y+22, r25	; 0x16
     f0c:	af 8b       	std	Y+23, r26	; 0x17
     f0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f10:	6d 89       	ldd	r22, Y+21	; 0x15
     f12:	7e 89       	ldd	r23, Y+22	; 0x16
     f14:	8f 89       	ldd	r24, Y+23	; 0x17
     f16:	98 8d       	ldd	r25, Y+24	; 0x18
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f24:	88 23       	and	r24, r24
     f26:	2c f4       	brge	.+10     	; 0xf32 <main+0x3ec>
		__ticks = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9c 8b       	std	Y+20, r25	; 0x14
     f2e:	8b 8b       	std	Y+19, r24	; 0x13
     f30:	3f c0       	rjmp	.+126    	; 0xfb0 <main+0x46a>
	else if (__tmp > 65535)
     f32:	6d 89       	ldd	r22, Y+21	; 0x15
     f34:	7e 89       	ldd	r23, Y+22	; 0x16
     f36:	8f 89       	ldd	r24, Y+23	; 0x17
     f38:	98 8d       	ldd	r25, Y+24	; 0x18
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	57 e4       	ldi	r21, 0x47	; 71
     f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f46:	18 16       	cp	r1, r24
     f48:	4c f5       	brge	.+82     	; 0xf9c <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4a:	69 8d       	ldd	r22, Y+25	; 0x19
     f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e2       	ldi	r20, 0x20	; 32
     f58:	51 e4       	ldi	r21, 0x41	; 65
     f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9c 8b       	std	Y+20, r25	; 0x14
     f70:	8b 8b       	std	Y+19, r24	; 0x13
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <main+0x44c>
     f74:	89 e1       	ldi	r24, 0x19	; 25
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9a 8b       	std	Y+18, r25	; 0x12
     f7a:	89 8b       	std	Y+17, r24	; 0x11
     f7c:	89 89       	ldd	r24, Y+17	; 0x11
     f7e:	9a 89       	ldd	r25, Y+18	; 0x12
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <main+0x43a>
     f84:	9a 8b       	std	Y+18, r25	; 0x12
     f86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f88:	8b 89       	ldd	r24, Y+19	; 0x13
     f8a:	9c 89       	ldd	r25, Y+20	; 0x14
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	9c 8b       	std	Y+20, r25	; 0x14
     f90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f92:	8b 89       	ldd	r24, Y+19	; 0x13
     f94:	9c 89       	ldd	r25, Y+20	; 0x14
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f7       	brne	.-38     	; 0xf74 <main+0x42e>
     f9a:	2c cf       	rjmp	.-424    	; 0xdf4 <main+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	9c 8b       	std	Y+20, r25	; 0x14
     fae:	8b 8b       	std	Y+19, r24	; 0x13
     fb0:	8b 89       	ldd	r24, Y+19	; 0x13
     fb2:	9c 89       	ldd	r25, Y+20	; 0x14
     fb4:	98 8b       	std	Y+16, r25	; 0x10
     fb6:	8f 87       	std	Y+15, r24	; 0x0f
     fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fba:	98 89       	ldd	r25, Y+16	; 0x10
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0x476>
     fc0:	98 8b       	std	Y+16, r25	; 0x10
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	17 cf       	rjmp	.-466    	; 0xdf4 <main+0x2ae>
						_delay_ms(500);
					}
				}
			}
		}
		else if (state == STEP_4_CHANGE_PASS)
     fc6:	8d a5       	ldd	r24, Y+45	; 0x2d
     fc8:	84 30       	cpi	r24, 0x04	; 4
     fca:	09 f0       	breq	.+2      	; 0xfce <main+0x488>
     fcc:	05 cf       	rjmp	.-502    	; 0xdd8 <main+0x292>
		{
			while(1)
			{
				passwordsMatchFlag = HMI_getPassword();
     fce:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <HMI_getPassword>
     fd2:	8c a7       	std	Y+44, r24	; 0x2c
				if(passwordsMatchFlag == MATCH)
     fd4:	8c a5       	ldd	r24, Y+44	; 0x2c
     fd6:	85 30       	cpi	r24, 0x05	; 5
     fd8:	29 f4       	brne	.+10     	; 0xfe4 <main+0x49e>
				{
					/* clear g_enterPassMaxTrials (counter of consecutive wrong passwords)*/
					g_enterPassMaxTrials = 0;
     fda:	1b a6       	std	Y+43, r1	; 0x2b

					/* configure state and passwordsMatchFlag variable to go to step_1 */
					state = SETTING_NEW_PASSWORD;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	8d a7       	std	Y+45, r24	; 0x2d
					passwordsMatchFlag = WRONG_PASS;
     fe0:	1c a6       	std	Y+44, r1	; 0x2c
     fe2:	fa ce       	rjmp	.-524    	; 0xdd8 <main+0x292>
					break;
				}
				else if (passwordsMatchFlag == NOT_MATCHING)
     fe4:	8c a5       	ldd	r24, Y+44	; 0x2c
     fe6:	86 30       	cpi	r24, 0x06	; 6
     fe8:	91 f7       	brne	.-28     	; 0xfce <main+0x488>
				{
					g_enterPassMaxTrials++;
     fea:	8b a5       	ldd	r24, Y+43	; 0x2b
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8b a7       	std	Y+43, r24	; 0x2b

					if(g_enterPassMaxTrials >= 3)
     ff0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	18 f1       	brcs	.+70     	; 0x103c <main+0x4f6>
					{
						Timer1_setCallBack(HMI_errorLCDProcessing);
     ff6:	83 ea       	ldi	r24, 0xA3	; 163
     ff8:	9d e0       	ldi	r25, 0x0D	; 13
     ffa:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Timer1_setCallBack>
						Timer1_init(&Timer1_Config_Buzzer);
     ffe:	ce 01       	movw	r24, r28
    1000:	c9 96       	adiw	r24, 0x39	; 57
    1002:	0e 94 07 18 	call	0x300e	; 0x300e <Timer1_init>

						/* display error message for 1 minute*/
						LCD_clearScreen();
    1006:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"ERROR, please");
    100a:	2e e9       	ldi	r18, 0x9E	; 158
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	a9 01       	movw	r20, r18
    1014:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"wait 1 min");
    1018:	2c ea       	ldi	r18, 0xAC	; 172
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
						while(stop_buzzer != 1);
    1026:	80 91 60 01 	lds	r24, 0x0160
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	e1 f7       	brne	.-8      	; 0x1026 <main+0x4e0>

						LCD_clearScreen();
    102e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>

						Timer1_deInit();  /* stop timer*/
    1032:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Timer1_deInit>
						stop_buzzer = 0;  /* clear buzzer flag*/
    1036:	10 92 60 01 	sts	0x0160, r1
    103a:	ce ce       	rjmp	.-612    	; 0xdd8 <main+0x292>
						break; /* break from the loop after setting alarm for 1 minute to go to main options again*/
					}
					else
					{
						LCD_displayStringRowColumn(0,0, "Incorrect Pass");
    103c:	27 eb       	ldi	r18, 0xB7	; 183
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>

						/*start communication with Control_ECU, to take password and check it from user again*/
						UART_sendByte(READY_TO_COMMUNICATE);
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
						UART_sendByte(STEP_4_CHANGE_PASS);
    1050:	84 e0       	ldi	r24, 0x04	; 4
    1052:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	aa ef       	ldi	r26, 0xFA	; 250
    105c:	b3 e4       	ldi	r27, 0x43	; 67
    105e:	8b 87       	std	Y+11, r24	; 0x0b
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	ad 87       	std	Y+13, r26	; 0x0d
    1064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	6b 85       	ldd	r22, Y+11	; 0x0b
    1068:	7c 85       	ldd	r23, Y+12	; 0x0c
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a e7       	ldi	r20, 0x7A	; 122
    1074:	53 e4       	ldi	r21, 0x43	; 67
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	8f 83       	std	Y+7, r24	; 0x07
    1080:	98 87       	std	Y+8, r25	; 0x08
    1082:	a9 87       	std	Y+9, r26	; 0x09
    1084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109a:	88 23       	and	r24, r24
    109c:	2c f4       	brge	.+10     	; 0x10a8 <main+0x562>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <main+0x5e0>
	else if (__tmp > 65535)
    10a8:	6f 81       	ldd	r22, Y+7	; 0x07
    10aa:	78 85       	ldd	r23, Y+8	; 0x08
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	4c f5       	brge	.+82     	; 0x1112 <main+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <main+0x5c2>
    10ea:	89 e1       	ldi	r24, 0x19	; 25
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <main+0x5b0>
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	69 f7       	brne	.-38     	; 0x10ea <main+0x5a4>
    1110:	5e cf       	rjmp	.-324    	; 0xfce <main+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	6f 81       	ldd	r22, Y+7	; 0x07
    1114:	78 85       	ldd	r23, Y+8	; 0x08
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <main+0x5ec>
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	49 cf       	rjmp	.-366    	; 0xfce <main+0x488>

0000113c <HMI_settingNewPassword>:
/*
 * Description:
 *	Function to get the new password and send it to control EUC
 * */
void HMI_settingNewPassword(void)
{
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	c8 54       	subi	r28, 0x48	; 72
    114a:	d0 40       	sbci	r29, 0x00	; 0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
	uint8 check_password[PASSWORD_SIZE + 2];
	uint8 index;
	uint8 enter_key; /*variable used to get enter key*/
	//	uint8 errorConfirm = 0;

	LCD_clearScreen();
    1156:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0, "plz enter pass:");
    115a:	26 ec       	ldi	r18, 0xC6	; 198
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0); /* second row for password */
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_moveCursor>

	for(index = 0; index<PASSWORD_SIZE; index++)
    1170:	1a ae       	std	Y+58, r1	; 0x3a
    1172:	a5 c0       	rjmp	.+330    	; 0x12be <HMI_settingNewPassword+0x182>
	{
		NewPassword[index] = KEYPAD_getPressedKey();
    1174:	8a ad       	ldd	r24, Y+58	; 0x3a
    1176:	08 2f       	mov	r16, r24
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    117e:	28 2f       	mov	r18, r24
    1180:	ce 01       	movw	r24, r28
    1182:	cb 96       	adiw	r24, 0x3b	; 59
    1184:	fc 01       	movw	r30, r24
    1186:	e0 0f       	add	r30, r16
    1188:	f1 1f       	adc	r31, r17
    118a:	20 83       	st	Z, r18
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	aa ef       	ldi	r26, 0xFA	; 250
    1192:	b3 e4       	ldi	r27, 0x43	; 67
    1194:	8d ab       	std	Y+53, r24	; 0x35
    1196:	9e ab       	std	Y+54, r25	; 0x36
    1198:	af ab       	std	Y+55, r26	; 0x37
    119a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119c:	6d a9       	ldd	r22, Y+53	; 0x35
    119e:	7e a9       	ldd	r23, Y+54	; 0x36
    11a0:	8f a9       	ldd	r24, Y+55	; 0x37
    11a2:	98 ad       	ldd	r25, Y+56	; 0x38
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a e7       	ldi	r20, 0x7A	; 122
    11aa:	53 e4       	ldi	r21, 0x43	; 67
    11ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	89 ab       	std	Y+49, r24	; 0x31
    11b6:	9a ab       	std	Y+50, r25	; 0x32
    11b8:	ab ab       	std	Y+51, r26	; 0x33
    11ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	2c f4       	brge	.+10     	; 0x11de <HMI_settingNewPassword+0xa2>
		__ticks = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	98 ab       	std	Y+48, r25	; 0x30
    11da:	8f a7       	std	Y+47, r24	; 0x2f
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <HMI_settingNewPassword+0x120>
	else if (__tmp > 65535)
    11de:	69 a9       	ldd	r22, Y+49	; 0x31
    11e0:	7a a9       	ldd	r23, Y+50	; 0x32
    11e2:	8b a9       	ldd	r24, Y+51	; 0x33
    11e4:	9c a9       	ldd	r25, Y+52	; 0x34
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	4c f5       	brge	.+82     	; 0x1248 <HMI_settingNewPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f6:	6d a9       	ldd	r22, Y+53	; 0x35
    11f8:	7e a9       	ldd	r23, Y+54	; 0x36
    11fa:	8f a9       	ldd	r24, Y+55	; 0x37
    11fc:	98 ad       	ldd	r25, Y+56	; 0x38
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	98 ab       	std	Y+48, r25	; 0x30
    121c:	8f a7       	std	Y+47, r24	; 0x2f
    121e:	0f c0       	rjmp	.+30     	; 0x123e <HMI_settingNewPassword+0x102>
    1220:	89 e1       	ldi	r24, 0x19	; 25
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e a7       	std	Y+46, r25	; 0x2e
    1226:	8d a7       	std	Y+45, r24	; 0x2d
    1228:	8d a5       	ldd	r24, Y+45	; 0x2d
    122a:	9e a5       	ldd	r25, Y+46	; 0x2e
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <HMI_settingNewPassword+0xf0>
    1230:	9e a7       	std	Y+46, r25	; 0x2e
    1232:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	8f a5       	ldd	r24, Y+47	; 0x2f
    1236:	98 a9       	ldd	r25, Y+48	; 0x30
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	98 ab       	std	Y+48, r25	; 0x30
    123c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1240:	98 a9       	ldd	r25, Y+48	; 0x30
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <HMI_settingNewPassword+0xe4>
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <HMI_settingNewPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	69 a9       	ldd	r22, Y+49	; 0x31
    124a:	7a a9       	ldd	r23, Y+50	; 0x32
    124c:	8b a9       	ldd	r24, Y+51	; 0x33
    124e:	9c a9       	ldd	r25, Y+52	; 0x34
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	98 ab       	std	Y+48, r25	; 0x30
    125a:	8f a7       	std	Y+47, r24	; 0x2f
    125c:	8f a5       	ldd	r24, Y+47	; 0x2f
    125e:	98 a9       	ldd	r25, Y+48	; 0x30
    1260:	9c a7       	std	Y+44, r25	; 0x2c
    1262:	8b a7       	std	Y+43, r24	; 0x2b
    1264:	8b a5       	ldd	r24, Y+43	; 0x2b
    1266:	9c a5       	ldd	r25, Y+44	; 0x2c
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <HMI_settingNewPassword+0x12c>
    126c:	9c a7       	std	Y+44, r25	; 0x2c
    126e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);

		if((NewPassword[index] >= 0) && (NewPassword[index] <= 9))
    1270:	8a ad       	ldd	r24, Y+58	; 0x3a
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	ce 01       	movw	r24, r28
    1278:	cb 96       	adiw	r24, 0x3b	; 59
    127a:	fc 01       	movw	r30, r24
    127c:	e2 0f       	add	r30, r18
    127e:	f3 1f       	adc	r31, r19
    1280:	80 81       	ld	r24, Z
    1282:	8a 30       	cpi	r24, 0x0A	; 10
    1284:	c8 f4       	brcc	.+50     	; 0x12b8 <HMI_settingNewPassword+0x17c>
		{
			if(NewPassword[index] == 0)
    1286:	8a ad       	ldd	r24, Y+58	; 0x3a
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	ce 01       	movw	r24, r28
    128e:	cb 96       	adiw	r24, 0x3b	; 59
    1290:	fc 01       	movw	r30, r24
    1292:	e2 0f       	add	r30, r18
    1294:	f3 1f       	adc	r31, r19
    1296:	80 81       	ld	r24, Z
    1298:	88 23       	and	r24, r24
    129a:	51 f4       	brne	.+20     	; 0x12b0 <HMI_settingNewPassword+0x174>
			{
				/* replace zero by -1 to not be considered as null*/
				NewPassword[index] = -1;
    129c:	8a ad       	ldd	r24, Y+58	; 0x3a
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	ce 01       	movw	r24, r28
    12a4:	cb 96       	adiw	r24, 0x3b	; 59
    12a6:	fc 01       	movw	r30, r24
    12a8:	e2 0f       	add	r30, r18
    12aa:	f3 1f       	adc	r31, r19
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	80 83       	st	Z, r24
			}

			LCD_displayString("*");
    12b0:	86 ed       	ldi	r24, 0xD6	; 214
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_displayString>

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0, "plz enter pass:");
	LCD_moveCursor(1,0); /* second row for password */

	for(index = 0; index<PASSWORD_SIZE; index++)
    12b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	8a af       	std	Y+58, r24	; 0x3a
    12be:	8a ad       	ldd	r24, Y+58	; 0x3a
    12c0:	85 30       	cpi	r24, 0x05	; 5
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <HMI_settingNewPassword+0x18a>
    12c4:	57 cf       	rjmp	.-338    	; 0x1174 <HMI_settingNewPassword+0x38>
	}

	/* waiting until user presses '=' which represents enter */
	while(1)
	{
		enter_key= KEYPAD_getPressedKey();
    12c6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    12ca:	89 af       	std	Y+57, r24	; 0x39
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	aa ef       	ldi	r26, 0xFA	; 250
    12d2:	b3 e4       	ldi	r27, 0x43	; 67
    12d4:	8f a3       	std	Y+39, r24	; 0x27
    12d6:	98 a7       	std	Y+40, r25	; 0x28
    12d8:	a9 a7       	std	Y+41, r26	; 0x29
    12da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6f a1       	ldd	r22, Y+39	; 0x27
    12de:	78 a5       	ldd	r23, Y+40	; 0x28
    12e0:	89 a5       	ldd	r24, Y+41	; 0x29
    12e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a e7       	ldi	r20, 0x7A	; 122
    12ea:	53 e4       	ldi	r21, 0x43	; 67
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8b a3       	std	Y+35, r24	; 0x23
    12f6:	9c a3       	std	Y+36, r25	; 0x24
    12f8:	ad a3       	std	Y+37, r26	; 0x25
    12fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <HMI_settingNewPassword+0x1e2>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9a a3       	std	Y+34, r25	; 0x22
    131a:	89 a3       	std	Y+33, r24	; 0x21
    131c:	3f c0       	rjmp	.+126    	; 0x139c <HMI_settingNewPassword+0x260>
	else if (__tmp > 65535)
    131e:	6b a1       	ldd	r22, Y+35	; 0x23
    1320:	7c a1       	ldd	r23, Y+36	; 0x24
    1322:	8d a1       	ldd	r24, Y+37	; 0x25
    1324:	9e a1       	ldd	r25, Y+38	; 0x26
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <HMI_settingNewPassword+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6f a1       	ldd	r22, Y+39	; 0x27
    1338:	78 a5       	ldd	r23, Y+40	; 0x28
    133a:	89 a5       	ldd	r24, Y+41	; 0x29
    133c:	9a a5       	ldd	r25, Y+42	; 0x2a
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
    135e:	0f c0       	rjmp	.+30     	; 0x137e <HMI_settingNewPassword+0x242>
    1360:	89 e1       	ldi	r24, 0x19	; 25
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	98 a3       	std	Y+32, r25	; 0x20
    1366:	8f 8f       	std	Y+31, r24	; 0x1f
    1368:	8f 8d       	ldd	r24, Y+31	; 0x1f
    136a:	98 a1       	ldd	r25, Y+32	; 0x20
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <HMI_settingNewPassword+0x230>
    1370:	98 a3       	std	Y+32, r25	; 0x20
    1372:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	9a a1       	ldd	r25, Y+34	; 0x22
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9a a3       	std	Y+34, r25	; 0x22
    137c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	89 a1       	ldd	r24, Y+33	; 0x21
    1380:	9a a1       	ldd	r25, Y+34	; 0x22
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <HMI_settingNewPassword+0x224>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <HMI_settingNewPassword+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	89 a1       	ldd	r24, Y+33	; 0x21
    139e:	9a a1       	ldd	r25, Y+34	; 0x22
    13a0:	9e 8f       	std	Y+30, r25	; 0x1e
    13a2:	8d 8f       	std	Y+29, r24	; 0x1d
    13a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <HMI_settingNewPassword+0x26c>
    13ac:	9e 8f       	std	Y+30, r25	; 0x1e
    13ae:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		if(enter_key == '=')
    13b0:	89 ad       	ldd	r24, Y+57	; 0x39
    13b2:	8d 33       	cpi	r24, 0x3D	; 61
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <HMI_settingNewPassword+0x27c>
    13b6:	87 cf       	rjmp	.-242    	; 0x12c6 <HMI_settingNewPassword+0x18a>
		{
			break;
		}
	}
	NewPassword[index] = '#';
    13b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ce 01       	movw	r24, r28
    13c0:	cb 96       	adiw	r24, 0x3b	; 59
    13c2:	fc 01       	movw	r30, r24
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	83 e2       	ldi	r24, 0x23	; 35
    13ca:	80 83       	st	Z, r24
	index++;
    13cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	8a af       	std	Y+58, r24	; 0x3a
	NewPassword[index] = '\0';
    13d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	ce 01       	movw	r24, r28
    13da:	cb 96       	adiw	r24, 0x3b	; 59
    13dc:	fc 01       	movw	r30, r24
    13de:	e2 0f       	add	r30, r18
    13e0:	f3 1f       	adc	r31, r19
    13e2:	10 82       	st	Z, r1

	UART_sendByte(READY_TO_COMMUNICATE);
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
	UART_sendString(NewPassword);
    13ea:	ce 01       	movw	r24, r28
    13ec:	cb 96       	adiw	r24, 0x3b	; 59
    13ee:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendString>


	LCD_clearScreen(); /* clear screen to display new content */
    13f2:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>

	/* ask the user to enter the same password again */
	LCD_displayStringRowColumn(0,0, "plz re-enter the");
    13f6:	28 ed       	ldi	r18, 0xD8	; 216
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass:");
    1404:	29 ee       	ldi	r18, 0xE9	; 233
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	a9 01       	movw	r20, r18
    140e:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>

	for(index = 0; index<PASSWORD_SIZE; index++)
    1412:	1a ae       	std	Y+58, r1	; 0x3a
    1414:	9d c0       	rjmp	.+314    	; 0x1550 <HMI_settingNewPassword+0x414>
	{
		check_password[index] = KEYPAD_getPressedKey();
    1416:	8a ad       	ldd	r24, Y+58	; 0x3a
    1418:	08 2f       	mov	r16, r24
    141a:	10 e0       	ldi	r17, 0x00	; 0
    141c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    1420:	28 2f       	mov	r18, r24
    1422:	ce 01       	movw	r24, r28
    1424:	8e 5b       	subi	r24, 0xBE	; 190
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	fc 01       	movw	r30, r24
    142a:	e0 0f       	add	r30, r16
    142c:	f1 1f       	adc	r31, r17
    142e:	20 83       	st	Z, r18
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	aa ef       	ldi	r26, 0xFA	; 250
    1436:	b3 e4       	ldi	r27, 0x43	; 67
    1438:	89 8f       	std	Y+25, r24	; 0x19
    143a:	9a 8f       	std	Y+26, r25	; 0x1a
    143c:	ab 8f       	std	Y+27, r26	; 0x1b
    143e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	69 8d       	ldd	r22, Y+25	; 0x19
    1442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a e7       	ldi	r20, 0x7A	; 122
    144e:	53 e4       	ldi	r21, 0x43	; 67
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	8d 8b       	std	Y+21, r24	; 0x15
    145a:	9e 8b       	std	Y+22, r25	; 0x16
    145c:	af 8b       	std	Y+23, r26	; 0x17
    145e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1460:	6d 89       	ldd	r22, Y+21	; 0x15
    1462:	7e 89       	ldd	r23, Y+22	; 0x16
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1474:	88 23       	and	r24, r24
    1476:	2c f4       	brge	.+10     	; 0x1482 <HMI_settingNewPassword+0x346>
		__ticks = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	3f c0       	rjmp	.+126    	; 0x1500 <HMI_settingNewPassword+0x3c4>
	else if (__tmp > 65535)
    1482:	6d 89       	ldd	r22, Y+21	; 0x15
    1484:	7e 89       	ldd	r23, Y+22	; 0x16
    1486:	8f 89       	ldd	r24, Y+23	; 0x17
    1488:	98 8d       	ldd	r25, Y+24	; 0x18
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	3f ef       	ldi	r19, 0xFF	; 255
    148e:	4f e7       	ldi	r20, 0x7F	; 127
    1490:	57 e4       	ldi	r21, 0x47	; 71
    1492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1496:	18 16       	cp	r1, r24
    1498:	4c f5       	brge	.+82     	; 0x14ec <HMI_settingNewPassword+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149a:	69 8d       	ldd	r22, Y+25	; 0x19
    149c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    149e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9c 8b       	std	Y+20, r25	; 0x14
    14c0:	8b 8b       	std	Y+19, r24	; 0x13
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <HMI_settingNewPassword+0x3a6>
    14c4:	89 e1       	ldi	r24, 0x19	; 25
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9a 8b       	std	Y+18, r25	; 0x12
    14ca:	89 8b       	std	Y+17, r24	; 0x11
    14cc:	89 89       	ldd	r24, Y+17	; 0x11
    14ce:	9a 89       	ldd	r25, Y+18	; 0x12
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <HMI_settingNewPassword+0x394>
    14d4:	9a 8b       	std	Y+18, r25	; 0x12
    14d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	8b 89       	ldd	r24, Y+19	; 0x13
    14da:	9c 89       	ldd	r25, Y+20	; 0x14
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9c 8b       	std	Y+20, r25	; 0x14
    14e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	8b 89       	ldd	r24, Y+19	; 0x13
    14e4:	9c 89       	ldd	r25, Y+20	; 0x14
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f7       	brne	.-38     	; 0x14c4 <HMI_settingNewPassword+0x388>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <HMI_settingNewPassword+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	6d 89       	ldd	r22, Y+21	; 0x15
    14ee:	7e 89       	ldd	r23, Y+22	; 0x16
    14f0:	8f 89       	ldd	r24, Y+23	; 0x17
    14f2:	98 8d       	ldd	r25, Y+24	; 0x18
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	8b 89       	ldd	r24, Y+19	; 0x13
    1502:	9c 89       	ldd	r25, Y+20	; 0x14
    1504:	98 8b       	std	Y+16, r25	; 0x10
    1506:	8f 87       	std	Y+15, r24	; 0x0f
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	98 89       	ldd	r25, Y+16	; 0x10
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <HMI_settingNewPassword+0x3d0>
    1510:	98 8b       	std	Y+16, r25	; 0x10
    1512:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		/* replace zero by -1 to avoid conflict with null*/
		if(check_password[index] == 0)
    1514:	8a ad       	ldd	r24, Y+58	; 0x3a
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	ce 01       	movw	r24, r28
    151c:	8e 5b       	subi	r24, 0xBE	; 190
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	fc 01       	movw	r30, r24
    1522:	e2 0f       	add	r30, r18
    1524:	f3 1f       	adc	r31, r19
    1526:	80 81       	ld	r24, Z
    1528:	88 23       	and	r24, r24
    152a:	59 f4       	brne	.+22     	; 0x1542 <HMI_settingNewPassword+0x406>
		{
			check_password[index] = -1;
    152c:	8a ad       	ldd	r24, Y+58	; 0x3a
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	ce 01       	movw	r24, r28
    1534:	8e 5b       	subi	r24, 0xBE	; 190
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	fc 01       	movw	r30, r24
    153a:	e2 0f       	add	r30, r18
    153c:	f3 1f       	adc	r31, r19
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	80 83       	st	Z, r24
		}
		LCD_displayString("*");
    1542:	86 ed       	ldi	r24, 0xD6	; 214
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_displayString>

	/* ask the user to enter the same password again */
	LCD_displayStringRowColumn(0,0, "plz re-enter the");
	LCD_displayStringRowColumn(1,0,"same pass:");

	for(index = 0; index<PASSWORD_SIZE; index++)
    154a:	8a ad       	ldd	r24, Y+58	; 0x3a
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	8a af       	std	Y+58, r24	; 0x3a
    1550:	8a ad       	ldd	r24, Y+58	; 0x3a
    1552:	85 30       	cpi	r24, 0x05	; 5
    1554:	08 f4       	brcc	.+2      	; 0x1558 <HMI_settingNewPassword+0x41c>
    1556:	5f cf       	rjmp	.-322    	; 0x1416 <HMI_settingNewPassword+0x2da>
	}

	/* waiting until user presses '=' which represents enter */
	while(1)
	{
		enter_key= KEYPAD_getPressedKey();
    1558:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    155c:	89 af       	std	Y+57, r24	; 0x39
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	aa ef       	ldi	r26, 0xFA	; 250
    1564:	b3 e4       	ldi	r27, 0x43	; 67
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    1568:	9c 87       	std	Y+12, r25	; 0x0c
    156a:	ad 87       	std	Y+13, r26	; 0x0d
    156c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1570:	7c 85       	ldd	r23, Y+12	; 0x0c
    1572:	8d 85       	ldd	r24, Y+13	; 0x0d
    1574:	9e 85       	ldd	r25, Y+14	; 0x0e
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	53 e4       	ldi	r21, 0x43	; 67
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8f 83       	std	Y+7, r24	; 0x07
    1588:	98 87       	std	Y+8, r25	; 0x08
    158a:	a9 87       	std	Y+9, r26	; 0x09
    158c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5f e3       	ldi	r21, 0x3F	; 63
    159e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <HMI_settingNewPassword+0x474>
		__ticks = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	3f c0       	rjmp	.+126    	; 0x162e <HMI_settingNewPassword+0x4f2>
	else if (__tmp > 65535)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <HMI_settingNewPassword+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <HMI_settingNewPassword+0x4d4>
    15f2:	89 e1       	ldi	r24, 0x19	; 25
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <HMI_settingNewPassword+0x4c2>
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <HMI_settingNewPassword+0x4b6>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <HMI_settingNewPassword+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <HMI_settingNewPassword+0x4fe>
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if(enter_key == '=')
    1642:	89 ad       	ldd	r24, Y+57	; 0x39
    1644:	8d 33       	cpi	r24, 0x3D	; 61
    1646:	09 f0       	breq	.+2      	; 0x164a <HMI_settingNewPassword+0x50e>
    1648:	87 cf       	rjmp	.-242    	; 0x1558 <HMI_settingNewPassword+0x41c>
		{
			break;
		}
	}

	check_password[index] = '#';
    164a:	8a ad       	ldd	r24, Y+58	; 0x3a
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	ce 01       	movw	r24, r28
    1652:	8e 5b       	subi	r24, 0xBE	; 190
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	fc 01       	movw	r30, r24
    1658:	e2 0f       	add	r30, r18
    165a:	f3 1f       	adc	r31, r19
    165c:	83 e2       	ldi	r24, 0x23	; 35
    165e:	80 83       	st	Z, r24
	index++;
    1660:	8a ad       	ldd	r24, Y+58	; 0x3a
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	8a af       	std	Y+58, r24	; 0x3a
	check_password[index] = '\0';
    1666:	8a ad       	ldd	r24, Y+58	; 0x3a
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	ce 01       	movw	r24, r28
    166e:	8e 5b       	subi	r24, 0xBE	; 190
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	fc 01       	movw	r30, r24
    1674:	e2 0f       	add	r30, r18
    1676:	f3 1f       	adc	r31, r19
    1678:	10 82       	st	Z, r1

	UART_sendByte(READY_TO_COMMUNICATE);
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
	UART_sendString(check_password);
    1680:	ce 01       	movw	r24, r28
    1682:	8e 5b       	subi	r24, 0xBE	; 190
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendString>
}
    168a:	c8 5b       	subi	r28, 0xB8	; 184
    168c:	df 4f       	sbci	r29, 0xFF	; 255
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <HMI_getPassword>:
/*
 * Description:
 *	  Function to get the password from the user and send it to control EUC
 * */
uint8 HMI_getPassword(void)
{
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	a5 97       	sbiw	r28, 0x25	; 37
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_SIZE+2];
	uint8 index;
	uint8 enter_key; /*variable used to get enter key*/

	LCD_clearScreen();
    16ba:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
    16be:	24 ef       	ldi	r18, 0xF4	; 244
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_moveCursor>

	for(index = 0; index<PASSWORD_SIZE; index++)
    16d4:	1e 8e       	std	Y+30, r1	; 0x1e
    16d6:	9a c0       	rjmp	.+308    	; 0x180c <HMI_getPassword+0x16a>
	{
		/* replace zero by -1 to avoid conflict with null*/
		password[index] = KEYPAD_getPressedKey();
    16d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16da:	08 2f       	mov	r16, r24
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    16e2:	28 2f       	mov	r18, r24
    16e4:	ce 01       	movw	r24, r28
    16e6:	4f 96       	adiw	r24, 0x1f	; 31
    16e8:	fc 01       	movw	r30, r24
    16ea:	e0 0f       	add	r30, r16
    16ec:	f1 1f       	adc	r31, r17
    16ee:	20 83       	st	Z, r18
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	aa ef       	ldi	r26, 0xFA	; 250
    16f6:	b3 e4       	ldi	r27, 0x43	; 67
    16f8:	89 8f       	std	Y+25, r24	; 0x19
    16fa:	9a 8f       	std	Y+26, r25	; 0x1a
    16fc:	ab 8f       	std	Y+27, r26	; 0x1b
    16fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	69 8d       	ldd	r22, Y+25	; 0x19
    1702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8d 8b       	std	Y+21, r24	; 0x15
    171a:	9e 8b       	std	Y+22, r25	; 0x16
    171c:	af 8b       	std	Y+23, r26	; 0x17
    171e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <HMI_getPassword+0xa0>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <HMI_getPassword+0x11e>
	else if (__tmp > 65535)
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <HMI_getPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <HMI_getPassword+0x100>
    1784:	89 e1       	ldi	r24, 0x19	; 25
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
    178c:	89 89       	ldd	r24, Y+17	; 0x11
    178e:	9a 89       	ldd	r25, Y+18	; 0x12
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <HMI_getPassword+0xee>
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	9c 89       	ldd	r25, Y+20	; 0x14
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <HMI_getPassword+0xe2>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <HMI_getPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ca:	98 89       	ldd	r25, Y+16	; 0x10
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <HMI_getPassword+0x12a>
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		/* replace zero by -1 to not be considered as null*/
		if(password[index] == 0)
    17d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	ce 01       	movw	r24, r28
    17dc:	4f 96       	adiw	r24, 0x1f	; 31
    17de:	fc 01       	movw	r30, r24
    17e0:	e2 0f       	add	r30, r18
    17e2:	f3 1f       	adc	r31, r19
    17e4:	80 81       	ld	r24, Z
    17e6:	88 23       	and	r24, r24
    17e8:	51 f4       	brne	.+20     	; 0x17fe <HMI_getPassword+0x15c>
		{
			password[index] = -1;
    17ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	ce 01       	movw	r24, r28
    17f2:	4f 96       	adiw	r24, 0x1f	; 31
    17f4:	fc 01       	movw	r30, r24
    17f6:	e2 0f       	add	r30, r18
    17f8:	f3 1f       	adc	r31, r19
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	80 83       	st	Z, r24
		}
		LCD_displayString("*");
    17fe:	86 ed       	ldi	r24, 0xD6	; 214
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_displayString>

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
	LCD_moveCursor(1,0);

	for(index = 0; index<PASSWORD_SIZE; index++)
    1806:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1808:	8f 5f       	subi	r24, 0xFF	; 255
    180a:	8e 8f       	std	Y+30, r24	; 0x1e
    180c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180e:	85 30       	cpi	r24, 0x05	; 5
    1810:	08 f4       	brcc	.+2      	; 0x1814 <HMI_getPassword+0x172>
    1812:	62 cf       	rjmp	.-316    	; 0x16d8 <HMI_getPassword+0x36>
	}

	/* waiting until user presses '=' which represents enter */
	while(1)
	{
		enter_key= KEYPAD_getPressedKey();
    1814:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    1818:	8d 8f       	std	Y+29, r24	; 0x1d
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	aa ef       	ldi	r26, 0xFA	; 250
    1820:	b3 e4       	ldi	r27, 0x43	; 67
    1822:	8b 87       	std	Y+11, r24	; 0x0b
    1824:	9c 87       	std	Y+12, r25	; 0x0c
    1826:	ad 87       	std	Y+13, r26	; 0x0d
    1828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	6b 85       	ldd	r22, Y+11	; 0x0b
    182c:	7c 85       	ldd	r23, Y+12	; 0x0c
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a e7       	ldi	r20, 0x7A	; 122
    1838:	53 e4       	ldi	r21, 0x43	; 67
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8f 83       	std	Y+7, r24	; 0x07
    1844:	98 87       	std	Y+8, r25	; 0x08
    1846:	a9 87       	std	Y+9, r26	; 0x09
    1848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <HMI_getPassword+0x1ca>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <HMI_getPassword+0x248>
	else if (__tmp > 65535)
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <HMI_getPassword+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	6b 85       	ldd	r22, Y+11	; 0x0b
    1886:	7c 85       	ldd	r23, Y+12	; 0x0c
    1888:	8d 85       	ldd	r24, Y+13	; 0x0d
    188a:	9e 85       	ldd	r25, Y+14	; 0x0e
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <HMI_getPassword+0x22a>
    18ae:	89 e1       	ldi	r24, 0x19	; 25
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9c 83       	std	Y+4, r25	; 0x04
    18b4:	8b 83       	std	Y+3, r24	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <HMI_getPassword+0x218>
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f7       	brne	.-38     	; 0x18ae <HMI_getPassword+0x20c>
    18d4:	14 c0       	rjmp	.+40     	; 0x18fe <HMI_getPassword+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6f 81       	ldd	r22, Y+7	; 0x07
    18d8:	78 85       	ldd	r23, Y+8	; 0x08
    18da:	89 85       	ldd	r24, Y+9	; 0x09
    18dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <HMI_getPassword+0x254>
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if(enter_key == '=')
    18fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1900:	8d 33       	cpi	r24, 0x3D	; 61
    1902:	09 f0       	breq	.+2      	; 0x1906 <HMI_getPassword+0x264>
    1904:	87 cf       	rjmp	.-242    	; 0x1814 <HMI_getPassword+0x172>
		{
			break;
		}
	}
	password[index] = '#';
    1906:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	ce 01       	movw	r24, r28
    190e:	4f 96       	adiw	r24, 0x1f	; 31
    1910:	fc 01       	movw	r30, r24
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	83 e2       	ldi	r24, 0x23	; 35
    1918:	80 83       	st	Z, r24
	index++;
    191a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	8e 8f       	std	Y+30, r24	; 0x1e
	password[index] = '\0';
    1920:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	ce 01       	movw	r24, r28
    1928:	4f 96       	adiw	r24, 0x1f	; 31
    192a:	fc 01       	movw	r30, r24
    192c:	e2 0f       	add	r30, r18
    192e:	f3 1f       	adc	r31, r19
    1930:	10 82       	st	Z, r1

	UART_sendByte(READY_TO_COMMUNICATE);
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
	UART_sendString(password);
    1938:	ce 01       	movw	r24, r28
    193a:	4f 96       	adiw	r24, 0x1f	; 31
    193c:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendString>

	UART_sendByte(READY_TO_COMMUNICATE);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
	return UART_receiveByte();
    1946:	0e 94 36 19 	call	0x326c	; 0x326c <UART_receiveByte>
}
    194a:	a5 96       	adiw	r28, 0x25	; 37
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	08 95       	ret

00001960 <HMI_matchPass>:
 * Description:
 *	  Function that indicate if the entered password and the stored password
 *	  are matched or not
 * */
uint8 HMI_matchPass(void)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY_TO_COMMUNICATE);
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>

	return UART_receiveByte();
    196e:	0e 94 36 19 	call	0x326c	; 0x326c <UART_receiveByte>
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <HMI_mainOptions>:
 *	  + : open the door.
 *	  - : Change password.
 *	  and send it to CONTROL ECU
 * */
uint8 HMI_mainOptions(void)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	60 97       	sbiw	r28, 0x10	; 16
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
	uint8 key_option;
	do
	{
		LCD_clearScreen();
    198c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+: Open Door");
    1990:	24 e0       	ldi	r18, 0x04	; 4
    1992:	31 e0       	ldi	r19, 0x01	; 1
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	a9 01       	movw	r20, r18
    199a:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "-: Change Pass");
    199e:	21 e1       	ldi	r18, 0x11	; 17
    19a0:	31 e0       	ldi	r19, 0x01	; 1
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>

		key_option = KEYPAD_getPressedKey();
    19ac:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_getPressedKey>
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	aa ef       	ldi	r26, 0xFA	; 250
    19b8:	b3 e4       	ldi	r27, 0x43	; 67
    19ba:	8b 87       	std	Y+11, r24	; 0x0b
    19bc:	9c 87       	std	Y+12, r25	; 0x0c
    19be:	ad 87       	std	Y+13, r26	; 0x0d
    19c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	53 e4       	ldi	r21, 0x43	; 67
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8f 83       	std	Y+7, r24	; 0x07
    19dc:	98 87       	std	Y+8, r25	; 0x08
    19de:	a9 87       	std	Y+9, r26	; 0x09
    19e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <HMI_mainOptions+0x8c>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <HMI_mainOptions+0x10a>
	else if (__tmp > 65535)
    1a04:	6f 81       	ldd	r22, Y+7	; 0x07
    1a06:	78 85       	ldd	r23, Y+8	; 0x08
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <HMI_mainOptions+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <HMI_mainOptions+0xec>
    1a46:	89 e1       	ldi	r24, 0x19	; 25
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9c 83       	std	Y+4, r25	; 0x04
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <HMI_mainOptions+0xda>
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <HMI_mainOptions+0xce>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <HMI_mainOptions+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <HMI_mainOptions+0x116>
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		if(key_option == '+')
    1a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a98:	8b 32       	cpi	r24, 0x2B	; 43
    1a9a:	49 f4       	brne	.+18     	; 0x1aae <HMI_mainOptions+0x136>
		{
			/*start communication with Control_ECU*/
			UART_sendByte(READY_TO_COMMUNICATE);
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
			UART_sendByte(STEP_3_OPEN_DOOR);
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
			return STEP_3_OPEN_DOOR;
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	88 8b       	std	Y+16, r24	; 0x10
    1aac:	1d c0       	rjmp	.+58     	; 0x1ae8 <HMI_mainOptions+0x170>
		}
		else if(key_option == '-')
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	8d 32       	cpi	r24, 0x2D	; 45
    1ab2:	49 f4       	brne	.+18     	; 0x1ac6 <HMI_mainOptions+0x14e>
		{
			/*start communication with Control_ECU*/
			UART_sendByte(READY_TO_COMMUNICATE);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
			UART_sendByte(STEP_4_CHANGE_PASS);
    1aba:	84 e0       	ldi	r24, 0x04	; 4
    1abc:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
			return STEP_4_CHANGE_PASS;
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	88 8b       	std	Y+16, r24	; 0x10
    1ac4:	11 c0       	rjmp	.+34     	; 0x1ae8 <HMI_mainOptions+0x170>
		}
		else
		{
			/* handling case if input isn't '+' or '-" */
			LCD_clearScreen();
    1ac6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Invalid Input");
    1aca:	20 e2       	ldi	r18, 0x20	; 32
    1acc:	31 e0       	ldi	r19, 0x01	; 1
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	a9 01       	movw	r20, r18
    1ad4:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Enter + OR -");
    1ad8:	2e e2       	ldi	r18, 0x2E	; 46
    1ada:	31 e0       	ldi	r19, 0x01	; 1
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayStringRowColumn>
    1ae6:	52 cf       	rjmp	.-348    	; 0x198c <HMI_mainOptions+0x14>
		}
	}while(1);
    1ae8:	88 89       	ldd	r24, Y+16	; 0x10

}
    1aea:	60 96       	adiw	r28, 0x10	; 16
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <Controling_LCD_openDoorState>:
/*
 * Description:
 * call back function of timer1, to control LCD while opening and closing the door
 */
void Controling_LCD_openDoorState (void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62

	static uint8 timer1_tick=0;
	timer1_tick++;
    1b04:	80 91 61 01 	lds	r24, 0x0161
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 93 61 01 	sts	0x0161, r24

	if(timer1_tick == 5)
    1b0e:	80 91 61 01 	lds	r24, 0x0161
    1b12:	85 30       	cpi	r24, 0x05	; 5
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <Controling_LCD_openDoorState+0x22>
	{
		/* stop displaying open door message */
		open_flag=1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 5c 01 	sts	0x015C, r24
    1b1c:	11 c0       	rjmp	.+34     	; 0x1b40 <Controling_LCD_openDoorState+0x44>

	}
	else if(timer1_tick==6)
    1b1e:	80 91 61 01 	lds	r24, 0x0161
    1b22:	86 30       	cpi	r24, 0x06	; 6
    1b24:	21 f4       	brne	.+8      	; 0x1b2e <Controling_LCD_openDoorState+0x32>
	{
		stop_flag=1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 5d 01 	sts	0x015D, r24
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <Controling_LCD_openDoorState+0x44>
	}
	else if(timer1_tick == 11 )
    1b2e:	80 91 61 01 	lds	r24, 0x0161
    1b32:	8b 30       	cpi	r24, 0x0B	; 11
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <Controling_LCD_openDoorState+0x44>
	{
		/* stop displaying open door message */
		close_flag =1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	80 93 5f 01 	sts	0x015F, r24

		/* put zero in timer1_tick to start same calculations when opening door again*/
		timer1_tick=0;
    1b3c:	10 92 61 01 	sts	0x0161, r1
	}
}
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <HMI_errorLCDProcessing>:
 * Description:
 * Function to set stop_buzzer after to delete error message on LCD
 * after 1 minute from displaying it
 */
void HMI_errorLCDProcessing(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	stop_buzzer=1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	80 93 60 01 	sts	0x0160, r24
}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <GPIO_setupPinDirection+0x6>
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <GPIO_setupPinDirection+0x8>
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
    1b6c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	88 30       	cpi	r24, 0x08	; 8
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <GPIO_setupPinDirection+0x1c>
    1b74:	d5 c0       	rjmp	.+426    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	84 30       	cpi	r24, 0x04	; 4
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <GPIO_setupPinDirection+0x24>
    1b7c:	d1 c0       	rjmp	.+418    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	3d 83       	std	Y+5, r19	; 0x05
    1b86:	2c 83       	std	Y+4, r18	; 0x04
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <GPIO_setupPinDirection+0x3a>
    1b92:	43 c0       	rjmp	.+134    	; 0x1c1a <GPIO_setupPinDirection+0xc0>
    1b94:	2c 81       	ldd	r18, Y+4	; 0x04
    1b96:	3d 81       	ldd	r19, Y+5	; 0x05
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <GPIO_setupPinDirection+0x4e>
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	71 f0       	breq	.+28     	; 0x1bc2 <GPIO_setupPinDirection+0x68>
    1ba6:	bc c0       	rjmp	.+376    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
    1ba8:	2c 81       	ldd	r18, Y+4	; 0x04
    1baa:	3d 81       	ldd	r19, Y+5	; 0x05
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <GPIO_setupPinDirection+0x5a>
    1bb2:	5f c0       	rjmp	.+190    	; 0x1c72 <GPIO_setupPinDirection+0x118>
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <GPIO_setupPinDirection+0x66>
    1bbe:	85 c0       	rjmp	.+266    	; 0x1cca <GPIO_setupPinDirection+0x170>
    1bc0:	af c0       	rjmp	.+350    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	a1 f4       	brne	.+40     	; 0x1bf0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1bc8:	aa e3       	ldi	r26, 0x3A	; 58
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	ea e3       	ldi	r30, 0x3A	; 58
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <GPIO_setupPinDirection+0x8c>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <GPIO_setupPinDirection+0x88>
    1bea:	84 2b       	or	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	98 c0       	rjmp	.+304    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bf0:	aa e3       	ldi	r26, 0x3A	; 58
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ea e3       	ldi	r30, 0x3A	; 58
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <GPIO_setupPinDirection+0xb4>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <GPIO_setupPinDirection+0xb0>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	83 c0       	rjmp	.+262    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	a1 f4       	brne	.+40     	; 0x1c48 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c20:	a7 e3       	ldi	r26, 0x37	; 55
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e7 e3       	ldi	r30, 0x37	; 55
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <GPIO_setupPinDirection+0xe4>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <GPIO_setupPinDirection+0xe0>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	6c c0       	rjmp	.+216    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c48:	a7 e3       	ldi	r26, 0x37	; 55
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e7 e3       	ldi	r30, 0x37	; 55
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <GPIO_setupPinDirection+0x10c>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <GPIO_setupPinDirection+0x108>
    1c6a:	80 95       	com	r24
    1c6c:	84 23       	and	r24, r20
    1c6e:	8c 93       	st	X, r24
    1c70:	57 c0       	rjmp	.+174    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	a1 f4       	brne	.+40     	; 0x1ca0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c78:	a4 e3       	ldi	r26, 0x34	; 52
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e4 e3       	ldi	r30, 0x34	; 52
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <GPIO_setupPinDirection+0x13c>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <GPIO_setupPinDirection+0x138>
    1c9a:	84 2b       	or	r24, r20
    1c9c:	8c 93       	st	X, r24
    1c9e:	40 c0       	rjmp	.+128    	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ca0:	a4 e3       	ldi	r26, 0x34	; 52
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e4 e3       	ldi	r30, 0x34	; 52
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	48 2f       	mov	r20, r24
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 2e       	mov	r0, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <GPIO_setupPinDirection+0x164>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0a 94       	dec	r0
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <GPIO_setupPinDirection+0x160>
    1cc2:	80 95       	com	r24
    1cc4:	84 23       	and	r24, r20
    1cc6:	8c 93       	st	X, r24
    1cc8:	2b c0       	rjmp	.+86     	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	a1 f4       	brne	.+40     	; 0x1cf8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1cd0:	a1 e3       	ldi	r26, 0x31	; 49
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e1 e3       	ldi	r30, 0x31	; 49
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <GPIO_setupPinDirection+0x194>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <GPIO_setupPinDirection+0x190>
    1cf2:	84 2b       	or	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1cf8:	a1 e3       	ldi	r26, 0x31	; 49
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e1 e3       	ldi	r30, 0x31	; 49
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <GPIO_setupPinDirection+0x1bc>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <GPIO_setupPinDirection+0x1b8>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <GPIO_writePin+0x6>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <GPIO_writePin+0x8>
    1d38:	0f 92       	push	r0
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	6a 83       	std	Y+2, r22	; 0x02
    1d42:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	88 30       	cpi	r24, 0x08	; 8
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <GPIO_writePin+0x1c>
    1d4a:	d5 c0       	rjmp	.+426    	; 0x1ef6 <GPIO_writePin+0x1c6>
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <GPIO_writePin+0x24>
    1d52:	d1 c0       	rjmp	.+418    	; 0x1ef6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3d 83       	std	Y+5, r19	; 0x05
    1d5c:	2c 83       	std	Y+4, r18	; 0x04
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	9d 81       	ldd	r25, Y+5	; 0x05
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <GPIO_writePin+0x3a>
    1d68:	43 c0       	rjmp	.+134    	; 0x1df0 <GPIO_writePin+0xc0>
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <GPIO_writePin+0x4e>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <GPIO_writePin+0x68>
    1d7c:	bc c0       	rjmp	.+376    	; 0x1ef6 <GPIO_writePin+0x1c6>
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	3d 81       	ldd	r19, Y+5	; 0x05
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <GPIO_writePin+0x5a>
    1d88:	5f c0       	rjmp	.+190    	; 0x1e48 <GPIO_writePin+0x118>
    1d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8e:	83 30       	cpi	r24, 0x03	; 3
    1d90:	91 05       	cpc	r25, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <GPIO_writePin+0x66>
    1d94:	85 c0       	rjmp	.+266    	; 0x1ea0 <GPIO_writePin+0x170>
    1d96:	af c0       	rjmp	.+350    	; 0x1ef6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	a1 f4       	brne	.+40     	; 0x1dc6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d9e:	ab e3       	ldi	r26, 0x3B	; 59
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	eb e3       	ldi	r30, 0x3B	; 59
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <GPIO_writePin+0x8c>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <GPIO_writePin+0x88>
    1dc0:	84 2b       	or	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	98 c0       	rjmp	.+304    	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1dc6:	ab e3       	ldi	r26, 0x3B	; 59
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	eb e3       	ldi	r30, 0x3B	; 59
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_writePin+0xb4>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_writePin+0xb0>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	83 c0       	rjmp	.+262    	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	a1 f4       	brne	.+40     	; 0x1e1e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1df6:	a8 e3       	ldi	r26, 0x38	; 56
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e8 e3       	ldi	r30, 0x38	; 56
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <GPIO_writePin+0xe4>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <GPIO_writePin+0xe0>
    1e18:	84 2b       	or	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	6c c0       	rjmp	.+216    	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e1e:	a8 e3       	ldi	r26, 0x38	; 56
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e8 e3       	ldi	r30, 0x38	; 56
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <GPIO_writePin+0x10c>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <GPIO_writePin+0x108>
    1e40:	80 95       	com	r24
    1e42:	84 23       	and	r24, r20
    1e44:	8c 93       	st	X, r24
    1e46:	57 c0       	rjmp	.+174    	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	a1 f4       	brne	.+40     	; 0x1e76 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e4e:	a5 e3       	ldi	r26, 0x35	; 53
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e3       	ldi	r30, 0x35	; 53
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <GPIO_writePin+0x13c>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <GPIO_writePin+0x138>
    1e70:	84 2b       	or	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	40 c0       	rjmp	.+128    	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <GPIO_writePin+0x164>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <GPIO_writePin+0x160>
    1e98:	80 95       	com	r24
    1e9a:	84 23       	and	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	2b c0       	rjmp	.+86     	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	a1 f4       	brne	.+40     	; 0x1ece <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ea6:	a2 e3       	ldi	r26, 0x32	; 50
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e2 e3       	ldi	r30, 0x32	; 50
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <GPIO_writePin+0x194>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <GPIO_writePin+0x190>
    1ec8:	84 2b       	or	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ece:	a2 e3       	ldi	r26, 0x32	; 50
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e2 e3       	ldi	r30, 0x32	; 50
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <GPIO_writePin+0x1bc>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <GPIO_writePin+0x1b8>
    1ef0:	80 95       	com	r24
    1ef2:	84 23       	and	r24, r20
    1ef4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <GPIO_readPin+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <GPIO_readPin+0x8>
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	8a 83       	std	Y+2, r24	; 0x02
    1f16:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f18:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	88 30       	cpi	r24, 0x08	; 8
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <GPIO_readPin+0x1c>
    1f20:	84 c0       	rjmp	.+264    	; 0x202a <GPIO_readPin+0x124>
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <GPIO_readPin+0x24>
    1f28:	80 c0       	rjmp	.+256    	; 0x202a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3d 83       	std	Y+5, r19	; 0x05
    1f32:	2c 83       	std	Y+4, r18	; 0x04
    1f34:	4c 81       	ldd	r20, Y+4	; 0x04
    1f36:	5d 81       	ldd	r21, Y+5	; 0x05
    1f38:	41 30       	cpi	r20, 0x01	; 1
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	79 f1       	breq	.+94     	; 0x1f9c <GPIO_readPin+0x96>
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	91 05       	cpc	r25, r1
    1f46:	34 f4       	brge	.+12     	; 0x1f54 <GPIO_readPin+0x4e>
    1f48:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4c:	21 15       	cp	r18, r1
    1f4e:	31 05       	cpc	r19, r1
    1f50:	69 f0       	breq	.+26     	; 0x1f6c <GPIO_readPin+0x66>
    1f52:	6b c0       	rjmp	.+214    	; 0x202a <GPIO_readPin+0x124>
    1f54:	4c 81       	ldd	r20, Y+4	; 0x04
    1f56:	5d 81       	ldd	r21, Y+5	; 0x05
    1f58:	42 30       	cpi	r20, 0x02	; 2
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	b9 f1       	breq	.+110    	; 0x1fcc <GPIO_readPin+0xc6>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <GPIO_readPin+0x64>
    1f68:	49 c0       	rjmp	.+146    	; 0x1ffc <GPIO_readPin+0xf6>
    1f6a:	5f c0       	rjmp	.+190    	; 0x202a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f6c:	e9 e3       	ldi	r30, 0x39	; 57
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <GPIO_readPin+0x7e>
    1f80:	55 95       	asr	r21
    1f82:	47 95       	ror	r20
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <GPIO_readPin+0x7a>
    1f88:	ca 01       	movw	r24, r20
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	88 23       	and	r24, r24
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	49 c0       	rjmp	.+146    	; 0x202a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f98:	19 82       	std	Y+1, r1	; 0x01
    1f9a:	47 c0       	rjmp	.+142    	; 0x202a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f9c:	e6 e3       	ldi	r30, 0x36	; 54
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a9 01       	movw	r20, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <GPIO_readPin+0xae>
    1fb0:	55 95       	asr	r21
    1fb2:	47 95       	ror	r20
    1fb4:	8a 95       	dec	r24
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <GPIO_readPin+0xaa>
    1fb8:	ca 01       	movw	r24, r20
    1fba:	81 70       	andi	r24, 0x01	; 1
    1fbc:	90 70       	andi	r25, 0x00	; 0
    1fbe:	88 23       	and	r24, r24
    1fc0:	19 f0       	breq	.+6      	; 0x1fc8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	31 c0       	rjmp	.+98     	; 0x202a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	2f c0       	rjmp	.+94     	; 0x202a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1fcc:	e3 e3       	ldi	r30, 0x33	; 51
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a9 01       	movw	r20, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <GPIO_readPin+0xde>
    1fe0:	55 95       	asr	r21
    1fe2:	47 95       	ror	r20
    1fe4:	8a 95       	dec	r24
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <GPIO_readPin+0xda>
    1fe8:	ca 01       	movw	r24, r20
    1fea:	81 70       	andi	r24, 0x01	; 1
    1fec:	90 70       	andi	r25, 0x00	; 0
    1fee:	88 23       	and	r24, r24
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	19 c0       	rjmp	.+50     	; 0x202a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ff8:	19 82       	std	Y+1, r1	; 0x01
    1ffa:	17 c0       	rjmp	.+46     	; 0x202a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ffc:	e0 e3       	ldi	r30, 0x30	; 48
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a9 01       	movw	r20, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <GPIO_readPin+0x10e>
    2010:	55 95       	asr	r21
    2012:	47 95       	ror	r20
    2014:	8a 95       	dec	r24
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <GPIO_readPin+0x10a>
    2018:	ca 01       	movw	r24, r20
    201a:	81 70       	andi	r24, 0x01	; 1
    201c:	90 70       	andi	r25, 0x00	; 0
    201e:	88 23       	and	r24, r24
    2020:	19 f0       	breq	.+6      	; 0x2028 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	01 c0       	rjmp	.+2      	; 0x202a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2028:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    202a:	89 81       	ldd	r24, Y+1	; 0x01
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <GPIO_setupPortDirection+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <GPIO_setupPortDirection+0x8>
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	84 30       	cpi	r24, 0x04	; 4
    2050:	90 f5       	brcc	.+100    	; 0x20b6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	3c 83       	std	Y+4, r19	; 0x04
    205a:	2b 83       	std	Y+3, r18	; 0x03
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	91 05       	cpc	r25, r1
    2064:	d1 f0       	breq	.+52     	; 0x209a <GPIO_setupPortDirection+0x5e>
    2066:	2b 81       	ldd	r18, Y+3	; 0x03
    2068:	3c 81       	ldd	r19, Y+4	; 0x04
    206a:	22 30       	cpi	r18, 0x02	; 2
    206c:	31 05       	cpc	r19, r1
    206e:	2c f4       	brge	.+10     	; 0x207a <GPIO_setupPortDirection+0x3e>
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	61 f0       	breq	.+24     	; 0x2090 <GPIO_setupPortDirection+0x54>
    2078:	1e c0       	rjmp	.+60     	; 0x20b6 <GPIO_setupPortDirection+0x7a>
    207a:	2b 81       	ldd	r18, Y+3	; 0x03
    207c:	3c 81       	ldd	r19, Y+4	; 0x04
    207e:	22 30       	cpi	r18, 0x02	; 2
    2080:	31 05       	cpc	r19, r1
    2082:	81 f0       	breq	.+32     	; 0x20a4 <GPIO_setupPortDirection+0x68>
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	83 30       	cpi	r24, 0x03	; 3
    208a:	91 05       	cpc	r25, r1
    208c:	81 f0       	breq	.+32     	; 0x20ae <GPIO_setupPortDirection+0x72>
    208e:	13 c0       	rjmp	.+38     	; 0x20b6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2090:	ea e3       	ldi	r30, 0x3A	; 58
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	80 83       	st	Z, r24
    2098:	0e c0       	rjmp	.+28     	; 0x20b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    209a:	e7 e3       	ldi	r30, 0x37	; 55
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24
    20a2:	09 c0       	rjmp	.+18     	; 0x20b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20a4:	e4 e3       	ldi	r30, 0x34	; 52
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	80 83       	st	Z, r24
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    20ae:	e1 e3       	ldi	r30, 0x31	; 49
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	80 83       	st	Z, r24
			break;
		}
	}
}
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <GPIO_writePort+0x6>
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <GPIO_writePort+0x8>
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	84 30       	cpi	r24, 0x04	; 4
    20d8:	90 f5       	brcc	.+100    	; 0x213e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	3c 83       	std	Y+4, r19	; 0x04
    20e2:	2b 83       	std	Y+3, r18	; 0x03
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	d1 f0       	breq	.+52     	; 0x2122 <GPIO_writePort+0x5e>
    20ee:	2b 81       	ldd	r18, Y+3	; 0x03
    20f0:	3c 81       	ldd	r19, Y+4	; 0x04
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	2c f4       	brge	.+10     	; 0x2102 <GPIO_writePort+0x3e>
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	61 f0       	breq	.+24     	; 0x2118 <GPIO_writePort+0x54>
    2100:	1e c0       	rjmp	.+60     	; 0x213e <GPIO_writePort+0x7a>
    2102:	2b 81       	ldd	r18, Y+3	; 0x03
    2104:	3c 81       	ldd	r19, Y+4	; 0x04
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	81 f0       	breq	.+32     	; 0x212c <GPIO_writePort+0x68>
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	91 05       	cpc	r25, r1
    2114:	81 f0       	breq	.+32     	; 0x2136 <GPIO_writePort+0x72>
    2116:	13 c0       	rjmp	.+38     	; 0x213e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2118:	eb e3       	ldi	r30, 0x3B	; 59
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	80 83       	st	Z, r24
    2120:	0e c0       	rjmp	.+28     	; 0x213e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2122:	e8 e3       	ldi	r30, 0x38	; 56
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	80 83       	st	Z, r24
    212a:	09 c0       	rjmp	.+18     	; 0x213e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    212c:	e5 e3       	ldi	r30, 0x35	; 53
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	80 83       	st	Z, r24
    2134:	04 c0       	rjmp	.+8      	; 0x213e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	80 83       	st	Z, r24
			break;
		}
	}
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <GPIO_readPort+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <GPIO_readPort+0x8>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    215a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	84 30       	cpi	r24, 0x04	; 4
    2160:	90 f5       	brcc	.+100    	; 0x21c6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	3c 83       	std	Y+4, r19	; 0x04
    216a:	2b 83       	std	Y+3, r18	; 0x03
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	91 05       	cpc	r25, r1
    2174:	d1 f0       	breq	.+52     	; 0x21aa <GPIO_readPort+0x5e>
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	3c 81       	ldd	r19, Y+4	; 0x04
    217a:	22 30       	cpi	r18, 0x02	; 2
    217c:	31 05       	cpc	r19, r1
    217e:	2c f4       	brge	.+10     	; 0x218a <GPIO_readPort+0x3e>
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	61 f0       	breq	.+24     	; 0x21a0 <GPIO_readPort+0x54>
    2188:	1e c0       	rjmp	.+60     	; 0x21c6 <GPIO_readPort+0x7a>
    218a:	2b 81       	ldd	r18, Y+3	; 0x03
    218c:	3c 81       	ldd	r19, Y+4	; 0x04
    218e:	22 30       	cpi	r18, 0x02	; 2
    2190:	31 05       	cpc	r19, r1
    2192:	81 f0       	breq	.+32     	; 0x21b4 <GPIO_readPort+0x68>
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	83 30       	cpi	r24, 0x03	; 3
    219a:	91 05       	cpc	r25, r1
    219c:	81 f0       	breq	.+32     	; 0x21be <GPIO_readPort+0x72>
    219e:	13 c0       	rjmp	.+38     	; 0x21c6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21a0:	e9 e3       	ldi	r30, 0x39	; 57
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	0e c0       	rjmp	.+28     	; 0x21c6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    21aa:	e6 e3       	ldi	r30, 0x36	; 54
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    21b4:	e3 e3       	ldi	r30, 0x33	; 51
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    21be:	e0 e3       	ldi	r30, 0x30	; 48
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	60 97       	sbiw	r28, 0x10	; 16
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	62 e0       	ldi	r22, 0x02	; 2
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	63 e0       	ldi	r22, 0x03	; 3
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	64 e0       	ldi	r22, 0x04	; 4
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	65 e0       	ldi	r22, 0x05	; 5
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	66 e0       	ldi	r22, 0x06	; 6
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	67 e0       	ldi	r22, 0x07	; 7
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    223a:	1f 86       	std	Y+15, r1	; 0x0f
    223c:	ab c0       	rjmp	.+342    	; 0x2394 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	6f 85       	ldd	r22, Y+15	; 0x0f
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	6f 85       	ldd	r22, Y+15	; 0x0f
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2252:	18 8a       	std	Y+16, r1	; 0x10
    2254:	22 c0       	rjmp	.+68     	; 0x229a <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2256:	88 89       	ldd	r24, Y+16	; 0x10
    2258:	98 2f       	mov	r25, r24
    225a:	9c 5f       	subi	r25, 0xFC	; 252
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	69 2f       	mov	r22, r25
    2260:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GPIO_readPin>
    2264:	88 23       	and	r24, r24
    2266:	b1 f4       	brne	.+44     	; 0x2294 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	98 2f       	mov	r25, r24
    2278:	88 89       	ldd	r24, Y+16	; 0x10
    227a:	89 0f       	add	r24, r25
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	0e 94 cf 11 	call	0x239e	; 0x239e <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);

			_delay_ms(1);
		}
	}	
}
    2282:	60 96       	adiw	r28, 0x10	; 16
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2294:	88 89       	ldd	r24, Y+16	; 0x10
    2296:	8f 5f       	subi	r24, 0xFF	; 255
    2298:	88 8b       	std	Y+16, r24	; 0x10
    229a:	88 89       	ldd	r24, Y+16	; 0x10
    229c:	84 30       	cpi	r24, 0x04	; 4
    229e:	d8 f2       	brcs	.-74     	; 0x2256 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e8       	ldi	r26, 0x80	; 128
    22b0:	bf e3       	ldi	r27, 0x3F	; 63
    22b2:	8b 87       	std	Y+11, r24	; 0x0b
    22b4:	9c 87       	std	Y+12, r25	; 0x0c
    22b6:	ad 87       	std	Y+13, r26	; 0x0d
    22b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    22bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	53 e4       	ldi	r21, 0x43	; 67
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8f 83       	std	Y+7, r24	; 0x07
    22d4:	98 87       	std	Y+8, r25	; 0x08
    22d6:	a9 87       	std	Y+9, r26	; 0x09
    22d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	2c f4       	brge	.+10     	; 0x22fc <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	4c f5       	brge	.+82     	; 0x2366 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	6b 85       	ldd	r22, Y+11	; 0x0b
    2316:	7c 85       	ldd	r23, Y+12	; 0x0c
    2318:	8d 85       	ldd	r24, Y+13	; 0x0d
    231a:	9e 85       	ldd	r25, Y+14	; 0x0e
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	0f c0       	rjmp	.+30     	; 0x235c <KEYPAD_getPressedKey+0x186>
    233e:	89 e1       	ldi	r24, 0x19	; 25
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <KEYPAD_getPressedKey+0x174>
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <KEYPAD_getPressedKey+0x168>
    2364:	14 c0       	rjmp	.+40     	; 0x238e <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <KEYPAD_getPressedKey+0x1b0>
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    238e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	8f 87       	std	Y+15, r24	; 0x0f
    2394:	8f 85       	ldd	r24, Y+15	; 0x0f
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	08 f4       	brcc	.+2      	; 0x239c <KEYPAD_getPressedKey+0x1c6>
    239a:	51 cf       	rjmp	.-350    	; 0x223e <KEYPAD_getPressedKey+0x68>
    239c:	4e cf       	rjmp	.-356    	; 0x223a <KEYPAD_getPressedKey+0x64>

0000239e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    23ac:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	3c 83       	std	Y+4, r19	; 0x04
    23b6:	2b 83       	std	Y+3, r18	; 0x03
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	88 30       	cpi	r24, 0x08	; 8
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    23c2:	70 c0       	rjmp	.+224    	; 0x24a4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    23c4:	2b 81       	ldd	r18, Y+3	; 0x03
    23c6:	3c 81       	ldd	r19, Y+4	; 0x04
    23c8:	29 30       	cpi	r18, 0x09	; 9
    23ca:	31 05       	cpc	r19, r1
    23cc:	5c f5       	brge	.+86     	; 0x2424 <KEYPAD_4x4_adjustKeyNumber+0x86>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	84 30       	cpi	r24, 0x04	; 4
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <KEYPAD_4x4_adjustKeyNumber+0x3c>
    23d8:	59 c0       	rjmp	.+178    	; 0x248c <KEYPAD_4x4_adjustKeyNumber+0xee>
    23da:	2b 81       	ldd	r18, Y+3	; 0x03
    23dc:	3c 81       	ldd	r19, Y+4	; 0x04
    23de:	25 30       	cpi	r18, 0x05	; 5
    23e0:	31 05       	cpc	r19, r1
    23e2:	9c f4       	brge	.+38     	; 0x240a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	82 30       	cpi	r24, 0x02	; 2
    23ea:	91 05       	cpc	r25, r1
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    23ee:	48 c0       	rjmp	.+144    	; 0x2480 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    23f0:	2b 81       	ldd	r18, Y+3	; 0x03
    23f2:	3c 81       	ldd	r19, Y+4	; 0x04
    23f4:	23 30       	cpi	r18, 0x03	; 3
    23f6:	31 05       	cpc	r19, r1
    23f8:	0c f0       	brlt	.+2      	; 0x23fc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    23fa:	45 c0       	rjmp	.+138    	; 0x2486 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	91 05       	cpc	r25, r1
    2404:	09 f4       	brne	.+2      	; 0x2408 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2406:	39 c0       	rjmp	.+114    	; 0x247a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2408:	67 c0       	rjmp	.+206    	; 0x24d8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    240a:	2b 81       	ldd	r18, Y+3	; 0x03
    240c:	3c 81       	ldd	r19, Y+4	; 0x04
    240e:	26 30       	cpi	r18, 0x06	; 6
    2410:	31 05       	cpc	r19, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2414:	41 c0       	rjmp	.+130    	; 0x2498 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	87 30       	cpi	r24, 0x07	; 7
    241c:	91 05       	cpc	r25, r1
    241e:	0c f0       	brlt	.+2      	; 0x2422 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2420:	3e c0       	rjmp	.+124    	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x100>
    2422:	37 c0       	rjmp	.+110    	; 0x2492 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2424:	2b 81       	ldd	r18, Y+3	; 0x03
    2426:	3c 81       	ldd	r19, Y+4	; 0x04
    2428:	2c 30       	cpi	r18, 0x0C	; 12
    242a:	31 05       	cpc	r19, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x92>
    242e:	46 c0       	rjmp	.+140    	; 0x24bc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	8d 30       	cpi	r24, 0x0D	; 13
    2436:	91 05       	cpc	r25, r1
    2438:	5c f4       	brge	.+22     	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    243a:	2b 81       	ldd	r18, Y+3	; 0x03
    243c:	3c 81       	ldd	r19, Y+4	; 0x04
    243e:	2a 30       	cpi	r18, 0x0A	; 10
    2440:	31 05       	cpc	r19, r1
    2442:	b1 f1       	breq	.+108    	; 0x24b0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	8b 30       	cpi	r24, 0x0B	; 11
    244a:	91 05       	cpc	r25, r1
    244c:	a4 f5       	brge	.+104    	; 0x24b6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    244e:	2d c0       	rjmp	.+90     	; 0x24aa <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2450:	2b 81       	ldd	r18, Y+3	; 0x03
    2452:	3c 81       	ldd	r19, Y+4	; 0x04
    2454:	2e 30       	cpi	r18, 0x0E	; 14
    2456:	31 05       	cpc	r19, r1
    2458:	b9 f1       	breq	.+110    	; 0x24c8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	8e 30       	cpi	r24, 0x0E	; 14
    2460:	91 05       	cpc	r25, r1
    2462:	7c f1       	brlt	.+94     	; 0x24c2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	2f 30       	cpi	r18, 0x0F	; 15
    246a:	31 05       	cpc	r19, r1
    246c:	79 f1       	breq	.+94     	; 0x24cc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	80 31       	cpi	r24, 0x10	; 16
    2474:	91 05       	cpc	r25, r1
    2476:	69 f1       	breq	.+90     	; 0x24d2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2478:	2f c0       	rjmp	.+94     	; 0x24d8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    247a:	87 e0       	ldi	r24, 0x07	; 7
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	2e c0       	rjmp	.+92     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2480:	88 e0       	ldi	r24, 0x08	; 8
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	2b c0       	rjmp	.+86     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2486:	89 e0       	ldi	r24, 0x09	; 9
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	28 c0       	rjmp	.+80     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    248c:	85 e2       	ldi	r24, 0x25	; 37
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	25 c0       	rjmp	.+74     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	22 c0       	rjmp	.+68     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2498:	85 e0       	ldi	r24, 0x05	; 5
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	1f c0       	rjmp	.+62     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    249e:	86 e0       	ldi	r24, 0x06	; 6
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	1c c0       	rjmp	.+56     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    24a4:	8a e2       	ldi	r24, 0x2A	; 42
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	19 c0       	rjmp	.+50     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	16 c0       	rjmp	.+44     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    24b0:	82 e0       	ldi	r24, 0x02	; 2
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	13 c0       	rjmp	.+38     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	10 c0       	rjmp	.+32     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    24bc:	8d e2       	ldi	r24, 0x2D	; 45
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	0d c0       	rjmp	.+26     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    24c2:	8d e0       	ldi	r24, 0x0D	; 13
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	08 c0       	rjmp	.+16     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    24cc:	8d e3       	ldi	r24, 0x3D	; 61
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    24d2:	8b e2       	ldi	r24, 0x2B	; 43
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	2e 97       	sbiw	r28, 0x0e	; 14
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	64 e0       	ldi	r22, 0x04	; 4
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    250a:	83 e0       	ldi	r24, 0x03	; 3
    250c:	66 e0       	ldi	r22, 0x06	; 6
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <GPIO_setupPinDirection>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a0 ea       	ldi	r26, 0xA0	; 160
    251a:	b1 e4       	ldi	r27, 0x41	; 65
    251c:	8b 87       	std	Y+11, r24	; 0x0b
    251e:	9c 87       	std	Y+12, r25	; 0x0c
    2520:	ad 87       	std	Y+13, r26	; 0x0d
    2522:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2524:	6b 85       	ldd	r22, Y+11	; 0x0b
    2526:	7c 85       	ldd	r23, Y+12	; 0x0c
    2528:	8d 85       	ldd	r24, Y+13	; 0x0d
    252a:	9e 85       	ldd	r25, Y+14	; 0x0e
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a e7       	ldi	r20, 0x7A	; 122
    2532:	53 e4       	ldi	r21, 0x43	; 67
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8f 83       	std	Y+7, r24	; 0x07
    253e:	98 87       	std	Y+8, r25	; 0x08
    2540:	a9 87       	std	Y+9, r26	; 0x09
    2542:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <LCD_init+0x7a>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
    2564:	3f c0       	rjmp	.+126    	; 0x25e4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	4c f5       	brge	.+82     	; 0x25d0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2580:	7c 85       	ldd	r23, Y+12	; 0x0c
    2582:	8d 85       	ldd	r24, Y+13	; 0x0d
    2584:	9e 85       	ldd	r25, Y+14	; 0x0e
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	51 e4       	ldi	r21, 0x41	; 65
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
    25a6:	0f c0       	rjmp	.+30     	; 0x25c6 <LCD_init+0xda>
    25a8:	89 e1       	ldi	r24, 0x19	; 25
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <LCD_init+0xc8>
    25b8:	9c 83       	std	Y+4, r25	; 0x04
    25ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	69 f7       	brne	.-38     	; 0x25a8 <LCD_init+0xbc>
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_init+0x104>
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	6f ef       	ldi	r22, 0xFF	; 255
    25fc:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2600:	88 e3       	ldi	r24, 0x38	; 56
    2602:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2606:	8c e0       	ldi	r24, 0x0C	; 12
    2608:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_sendCommand>
}
    2612:	2e 96       	adiw	r28, 0x0e	; 14
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	e9 97       	sbiw	r28, 0x39	; 57
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	64 e0       	ldi	r22, 0x04	; 4
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e8       	ldi	r26, 0x80	; 128
    264a:	bf e3       	ldi	r27, 0x3F	; 63
    264c:	8d ab       	std	Y+53, r24	; 0x35
    264e:	9e ab       	std	Y+54, r25	; 0x36
    2650:	af ab       	std	Y+55, r26	; 0x37
    2652:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	6d a9       	ldd	r22, Y+53	; 0x35
    2656:	7e a9       	ldd	r23, Y+54	; 0x36
    2658:	8f a9       	ldd	r24, Y+55	; 0x37
    265a:	98 ad       	ldd	r25, Y+56	; 0x38
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a e7       	ldi	r20, 0x7A	; 122
    2662:	53 e4       	ldi	r21, 0x43	; 67
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	89 ab       	std	Y+49, r24	; 0x31
    266e:	9a ab       	std	Y+50, r25	; 0x32
    2670:	ab ab       	std	Y+51, r26	; 0x33
    2672:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2674:	69 a9       	ldd	r22, Y+49	; 0x31
    2676:	7a a9       	ldd	r23, Y+50	; 0x32
    2678:	8b a9       	ldd	r24, Y+51	; 0x33
    267a:	9c a9       	ldd	r25, Y+52	; 0x34
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	2c f4       	brge	.+10     	; 0x2696 <LCD_sendCommand+0x72>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	98 ab       	std	Y+48, r25	; 0x30
    2692:	8f a7       	std	Y+47, r24	; 0x2f
    2694:	3f c0       	rjmp	.+126    	; 0x2714 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2696:	69 a9       	ldd	r22, Y+49	; 0x31
    2698:	7a a9       	ldd	r23, Y+50	; 0x32
    269a:	8b a9       	ldd	r24, Y+51	; 0x33
    269c:	9c a9       	ldd	r25, Y+52	; 0x34
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	4c f5       	brge	.+82     	; 0x2700 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	6d a9       	ldd	r22, Y+53	; 0x35
    26b0:	7e a9       	ldd	r23, Y+54	; 0x36
    26b2:	8f a9       	ldd	r24, Y+55	; 0x37
    26b4:	98 ad       	ldd	r25, Y+56	; 0x38
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <LCD_sendCommand+0xd2>
    26d8:	89 e1       	ldi	r24, 0x19	; 25
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9e a7       	std	Y+46, r25	; 0x2e
    26de:	8d a7       	std	Y+45, r24	; 0x2d
    26e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_sendCommand+0xc0>
    26e8:	9e a7       	std	Y+46, r25	; 0x2e
    26ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ee:	98 a9       	ldd	r25, Y+48	; 0x30
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	98 ab       	std	Y+48, r25	; 0x30
    26f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f8:	98 a9       	ldd	r25, Y+48	; 0x30
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	69 f7       	brne	.-38     	; 0x26d8 <LCD_sendCommand+0xb4>
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	69 a9       	ldd	r22, Y+49	; 0x31
    2702:	7a a9       	ldd	r23, Y+50	; 0x32
    2704:	8b a9       	ldd	r24, Y+51	; 0x33
    2706:	9c a9       	ldd	r25, Y+52	; 0x34
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	98 ab       	std	Y+48, r25	; 0x30
    2712:	8f a7       	std	Y+47, r24	; 0x2f
    2714:	8f a5       	ldd	r24, Y+47	; 0x2f
    2716:	98 a9       	ldd	r25, Y+48	; 0x30
    2718:	9c a7       	std	Y+44, r25	; 0x2c
    271a:	8b a7       	std	Y+43, r24	; 0x2b
    271c:	8b a5       	ldd	r24, Y+43	; 0x2b
    271e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_sendCommand+0xfc>
    2724:	9c a7       	std	Y+44, r25	; 0x2c
    2726:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	66 e0       	ldi	r22, 0x06	; 6
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e8       	ldi	r26, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	8f a3       	std	Y+39, r24	; 0x27
    273c:	98 a7       	std	Y+40, r25	; 0x28
    273e:	a9 a7       	std	Y+41, r26	; 0x29
    2740:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	6f a1       	ldd	r22, Y+39	; 0x27
    2744:	78 a5       	ldd	r23, Y+40	; 0x28
    2746:	89 a5       	ldd	r24, Y+41	; 0x29
    2748:	9a a5       	ldd	r25, Y+42	; 0x2a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a e7       	ldi	r20, 0x7A	; 122
    2750:	53 e4       	ldi	r21, 0x43	; 67
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	8b a3       	std	Y+35, r24	; 0x23
    275c:	9c a3       	std	Y+36, r25	; 0x24
    275e:	ad a3       	std	Y+37, r26	; 0x25
    2760:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <LCD_sendCommand+0x160>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	3f ef       	ldi	r19, 0xFF	; 255
    2790:	4f e7       	ldi	r20, 0x7F	; 127
    2792:	57 e4       	ldi	r21, 0x47	; 71
    2794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2798:	18 16       	cp	r1, r24
    279a:	4c f5       	brge	.+82     	; 0x27ee <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	6f a1       	ldd	r22, Y+39	; 0x27
    279e:	78 a5       	ldd	r23, Y+40	; 0x28
    27a0:	89 a5       	ldd	r24, Y+41	; 0x29
    27a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <LCD_sendCommand+0x1c0>
    27c6:	89 e1       	ldi	r24, 0x19	; 25
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
    27ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d0:	98 a1       	ldd	r25, Y+32	; 0x20
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_sendCommand+0x1ae>
    27d6:	98 a3       	std	Y+32, r25	; 0x20
    27d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	89 a1       	ldd	r24, Y+33	; 0x21
    27dc:	9a a1       	ldd	r25, Y+34	; 0x22
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9a a3       	std	Y+34, r25	; 0x22
    27e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	9a a1       	ldd	r25, Y+34	; 0x22
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <LCD_sendCommand+0x1a2>
    27ec:	14 c0       	rjmp	.+40     	; 0x2816 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	6b a1       	ldd	r22, Y+35	; 0x23
    27f0:	7c a1       	ldd	r23, Y+36	; 0x24
    27f2:	8d a1       	ldd	r24, Y+37	; 0x25
    27f4:	9e a1       	ldd	r25, Y+38	; 0x26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9a a3       	std	Y+34, r25	; 0x22
    2800:	89 a3       	std	Y+33, r24	; 0x21
    2802:	89 a1       	ldd	r24, Y+33	; 0x21
    2804:	9a a1       	ldd	r25, Y+34	; 0x22
    2806:	9e 8f       	std	Y+30, r25	; 0x1e
    2808:	8d 8f       	std	Y+29, r24	; 0x1d
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_sendCommand+0x1ea>
    2812:	9e 8f       	std	Y+30, r25	; 0x1e
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	69 ad       	ldd	r22, Y+57	; 0x39
    281a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <GPIO_writePort>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e8       	ldi	r26, 0x80	; 128
    2824:	bf e3       	ldi	r27, 0x3F	; 63
    2826:	89 8f       	std	Y+25, r24	; 0x19
    2828:	9a 8f       	std	Y+26, r25	; 0x1a
    282a:	ab 8f       	std	Y+27, r26	; 0x1b
    282c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	69 8d       	ldd	r22, Y+25	; 0x19
    2830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	53 e4       	ldi	r21, 0x43	; 67
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	8d 8b       	std	Y+21, r24	; 0x15
    2848:	9e 8b       	std	Y+22, r25	; 0x16
    284a:	af 8b       	std	Y+23, r26	; 0x17
    284c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    284e:	6d 89       	ldd	r22, Y+21	; 0x15
    2850:	7e 89       	ldd	r23, Y+22	; 0x16
    2852:	8f 89       	ldd	r24, Y+23	; 0x17
    2854:	98 8d       	ldd	r25, Y+24	; 0x18
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	2c f4       	brge	.+10     	; 0x2870 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2870:	6d 89       	ldd	r22, Y+21	; 0x15
    2872:	7e 89       	ldd	r23, Y+22	; 0x16
    2874:	8f 89       	ldd	r24, Y+23	; 0x17
    2876:	98 8d       	ldd	r25, Y+24	; 0x18
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	4c f5       	brge	.+82     	; 0x28da <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	69 8d       	ldd	r22, Y+25	; 0x19
    288a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <LCD_sendCommand+0x2ac>
    28b2:	89 e1       	ldi	r24, 0x19	; 25
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9a 8b       	std	Y+18, r25	; 0x12
    28b8:	89 8b       	std	Y+17, r24	; 0x11
    28ba:	89 89       	ldd	r24, Y+17	; 0x11
    28bc:	9a 89       	ldd	r25, Y+18	; 0x12
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_sendCommand+0x29a>
    28c2:	9a 8b       	std	Y+18, r25	; 0x12
    28c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <LCD_sendCommand+0x28e>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	9c 8b       	std	Y+20, r25	; 0x14
    28ec:	8b 8b       	std	Y+19, r24	; 0x13
    28ee:	8b 89       	ldd	r24, Y+19	; 0x13
    28f0:	9c 89       	ldd	r25, Y+20	; 0x14
    28f2:	98 8b       	std	Y+16, r25	; 0x10
    28f4:	8f 87       	std	Y+15, r24	; 0x0f
    28f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f8:	98 89       	ldd	r25, Y+16	; 0x10
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_sendCommand+0x2d6>
    28fe:	98 8b       	std	Y+16, r25	; 0x10
    2900:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2902:	83 e0       	ldi	r24, 0x03	; 3
    2904:	66 e0       	ldi	r22, 0x06	; 6
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e8       	ldi	r26, 0x80	; 128
    2912:	bf e3       	ldi	r27, 0x3F	; 63
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a e7       	ldi	r20, 0x7A	; 122
    292a:	53 e4       	ldi	r21, 0x43	; 67
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <LCD_sendCommand+0x39a>
    29a0:	89 e1       	ldi	r24, 0x19	; 25
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_sendCommand+0x388>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <LCD_sendCommand+0x37c>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_sendCommand+0x3c4>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29f0:	e9 96       	adiw	r28, 0x39	; 57
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	e9 97       	sbiw	r28, 0x39	; 57
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	64 e0       	ldi	r22, 0x04	; 4
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a0 e8       	ldi	r26, 0x80	; 128
    2a28:	bf e3       	ldi	r27, 0x3F	; 63
    2a2a:	8d ab       	std	Y+53, r24	; 0x35
    2a2c:	9e ab       	std	Y+54, r25	; 0x36
    2a2e:	af ab       	std	Y+55, r26	; 0x37
    2a30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a32:	6d a9       	ldd	r22, Y+53	; 0x35
    2a34:	7e a9       	ldd	r23, Y+54	; 0x36
    2a36:	8f a9       	ldd	r24, Y+55	; 0x37
    2a38:	98 ad       	ldd	r25, Y+56	; 0x38
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	4a e7       	ldi	r20, 0x7A	; 122
    2a40:	53 e4       	ldi	r21, 0x43	; 67
    2a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	89 ab       	std	Y+49, r24	; 0x31
    2a4c:	9a ab       	std	Y+50, r25	; 0x32
    2a4e:	ab ab       	std	Y+51, r26	; 0x33
    2a50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a52:	69 a9       	ldd	r22, Y+49	; 0x31
    2a54:	7a a9       	ldd	r23, Y+50	; 0x32
    2a56:	8b a9       	ldd	r24, Y+51	; 0x33
    2a58:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e8       	ldi	r20, 0x80	; 128
    2a60:	5f e3       	ldi	r21, 0x3F	; 63
    2a62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a66:	88 23       	and	r24, r24
    2a68:	2c f4       	brge	.+10     	; 0x2a74 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	98 ab       	std	Y+48, r25	; 0x30
    2a70:	8f a7       	std	Y+47, r24	; 0x2f
    2a72:	3f c0       	rjmp	.+126    	; 0x2af2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2a74:	69 a9       	ldd	r22, Y+49	; 0x31
    2a76:	7a a9       	ldd	r23, Y+50	; 0x32
    2a78:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	3f ef       	ldi	r19, 0xFF	; 255
    2a80:	4f e7       	ldi	r20, 0x7F	; 127
    2a82:	57 e4       	ldi	r21, 0x47	; 71
    2a84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a88:	18 16       	cp	r1, r24
    2a8a:	4c f5       	brge	.+82     	; 0x2ade <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a90:	8f a9       	ldd	r24, Y+55	; 0x37
    2a92:	98 ad       	ldd	r25, Y+56	; 0x38
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e2       	ldi	r20, 0x20	; 32
    2a9a:	51 e4       	ldi	r21, 0x41	; 65
    2a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	98 ab       	std	Y+48, r25	; 0x30
    2ab2:	8f a7       	std	Y+47, r24	; 0x2f
    2ab4:	0f c0       	rjmp	.+30     	; 0x2ad4 <LCD_displayCharacter+0xd2>
    2ab6:	89 e1       	ldi	r24, 0x19	; 25
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9e a7       	std	Y+46, r25	; 0x2e
    2abc:	8d a7       	std	Y+45, r24	; 0x2d
    2abe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ac0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_displayCharacter+0xc0>
    2ac6:	9e a7       	std	Y+46, r25	; 0x2e
    2ac8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2acc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	98 ab       	std	Y+48, r25	; 0x30
    2ad2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	69 f7       	brne	.-38     	; 0x2ab6 <LCD_displayCharacter+0xb4>
    2adc:	14 c0       	rjmp	.+40     	; 0x2b06 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ade:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	98 ab       	std	Y+48, r25	; 0x30
    2af0:	8f a7       	std	Y+47, r24	; 0x2f
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	9c a7       	std	Y+44, r25	; 0x2c
    2af8:	8b a7       	std	Y+43, r24	; 0x2b
    2afa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <LCD_displayCharacter+0xfc>
    2b02:	9c a7       	std	Y+44, r25	; 0x2c
    2b04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b06:	83 e0       	ldi	r24, 0x03	; 3
    2b08:	66 e0       	ldi	r22, 0x06	; 6
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	a0 e8       	ldi	r26, 0x80	; 128
    2b16:	bf e3       	ldi	r27, 0x3F	; 63
    2b18:	8f a3       	std	Y+39, r24	; 0x27
    2b1a:	98 a7       	std	Y+40, r25	; 0x28
    2b1c:	a9 a7       	std	Y+41, r26	; 0x29
    2b1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b20:	6f a1       	ldd	r22, Y+39	; 0x27
    2b22:	78 a5       	ldd	r23, Y+40	; 0x28
    2b24:	89 a5       	ldd	r24, Y+41	; 0x29
    2b26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	4a e7       	ldi	r20, 0x7A	; 122
    2b2e:	53 e4       	ldi	r21, 0x43	; 67
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8b a3       	std	Y+35, r24	; 0x23
    2b3a:	9c a3       	std	Y+36, r25	; 0x24
    2b3c:	ad a3       	std	Y+37, r26	; 0x25
    2b3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b40:	6b a1       	ldd	r22, Y+35	; 0x23
    2b42:	7c a1       	ldd	r23, Y+36	; 0x24
    2b44:	8d a1       	ldd	r24, Y+37	; 0x25
    2b46:	9e a1       	ldd	r25, Y+38	; 0x26
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e8       	ldi	r20, 0x80	; 128
    2b4e:	5f e3       	ldi	r21, 0x3F	; 63
    2b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b54:	88 23       	and	r24, r24
    2b56:	2c f4       	brge	.+10     	; 0x2b62 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9a a3       	std	Y+34, r25	; 0x22
    2b5e:	89 a3       	std	Y+33, r24	; 0x21
    2b60:	3f c0       	rjmp	.+126    	; 0x2be0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2b62:	6b a1       	ldd	r22, Y+35	; 0x23
    2b64:	7c a1       	ldd	r23, Y+36	; 0x24
    2b66:	8d a1       	ldd	r24, Y+37	; 0x25
    2b68:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	3f ef       	ldi	r19, 0xFF	; 255
    2b6e:	4f e7       	ldi	r20, 0x7F	; 127
    2b70:	57 e4       	ldi	r21, 0x47	; 71
    2b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b76:	18 16       	cp	r1, r24
    2b78:	4c f5       	brge	.+82     	; 0x2bcc <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9a a3       	std	Y+34, r25	; 0x22
    2ba0:	89 a3       	std	Y+33, r24	; 0x21
    2ba2:	0f c0       	rjmp	.+30     	; 0x2bc2 <LCD_displayCharacter+0x1c0>
    2ba4:	89 e1       	ldi	r24, 0x19	; 25
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	98 a3       	std	Y+32, r25	; 0x20
    2baa:	8f 8f       	std	Y+31, r24	; 0x1f
    2bac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bae:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_displayCharacter+0x1ae>
    2bb4:	98 a3       	std	Y+32, r25	; 0x20
    2bb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bba:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	9a a3       	std	Y+34, r25	; 0x22
    2bc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	69 f7       	brne	.-38     	; 0x2ba4 <LCD_displayCharacter+0x1a2>
    2bca:	14 c0       	rjmp	.+40     	; 0x2bf4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bce:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9a a3       	std	Y+34, r25	; 0x22
    2bde:	89 a3       	std	Y+33, r24	; 0x21
    2be0:	89 a1       	ldd	r24, Y+33	; 0x21
    2be2:	9a a1       	ldd	r25, Y+34	; 0x22
    2be4:	9e 8f       	std	Y+30, r25	; 0x1e
    2be6:	8d 8f       	std	Y+29, r24	; 0x1d
    2be8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_displayCharacter+0x1ea>
    2bf0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	69 ad       	ldd	r22, Y+57	; 0x39
    2bf8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <GPIO_writePort>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	a0 e8       	ldi	r26, 0x80	; 128
    2c02:	bf e3       	ldi	r27, 0x3F	; 63
    2c04:	89 8f       	std	Y+25, r24	; 0x19
    2c06:	9a 8f       	std	Y+26, r25	; 0x1a
    2c08:	ab 8f       	std	Y+27, r26	; 0x1b
    2c0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a e7       	ldi	r20, 0x7A	; 122
    2c1a:	53 e4       	ldi	r21, 0x43	; 67
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8d 8b       	std	Y+21, r24	; 0x15
    2c26:	9e 8b       	std	Y+22, r25	; 0x16
    2c28:	af 8b       	std	Y+23, r26	; 0x17
    2c2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c30:	8f 89       	ldd	r24, Y+23	; 0x17
    2c32:	98 8d       	ldd	r25, Y+24	; 0x18
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f e3       	ldi	r21, 0x3F	; 63
    2c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c40:	88 23       	and	r24, r24
    2c42:	2c f4       	brge	.+10     	; 0x2c4e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	3f c0       	rjmp	.+126    	; 0x2ccc <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	3f ef       	ldi	r19, 0xFF	; 255
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	57 e4       	ldi	r21, 0x47	; 71
    2c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	4c f5       	brge	.+82     	; 0x2cb8 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c66:	69 8d       	ldd	r22, Y+25	; 0x19
    2c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	51 e4       	ldi	r21, 0x41	; 65
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9c 8b       	std	Y+20, r25	; 0x14
    2c8c:	8b 8b       	std	Y+19, r24	; 0x13
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <LCD_displayCharacter+0x2ac>
    2c90:	89 e1       	ldi	r24, 0x19	; 25
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9a 8b       	std	Y+18, r25	; 0x12
    2c96:	89 8b       	std	Y+17, r24	; 0x11
    2c98:	89 89       	ldd	r24, Y+17	; 0x11
    2c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <LCD_displayCharacter+0x29a>
    2ca0:	9a 8b       	std	Y+18, r25	; 0x12
    2ca2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	69 f7       	brne	.-38     	; 0x2c90 <LCD_displayCharacter+0x28e>
    2cb6:	14 c0       	rjmp	.+40     	; 0x2ce0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cba:	7e 89       	ldd	r23, Y+22	; 0x16
    2cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9c 8b       	std	Y+20, r25	; 0x14
    2cca:	8b 8b       	std	Y+19, r24	; 0x13
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	98 8b       	std	Y+16, r25	; 0x10
    2cd2:	8f 87       	std	Y+15, r24	; 0x0f
    2cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd6:	98 89       	ldd	r25, Y+16	; 0x10
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_displayCharacter+0x2d6>
    2cdc:	98 8b       	std	Y+16, r25	; 0x10
    2cde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	66 e0       	ldi	r22, 0x06	; 6
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <GPIO_writePin>
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	a0 e8       	ldi	r26, 0x80	; 128
    2cf0:	bf e3       	ldi	r27, 0x3F	; 63
    2cf2:	8b 87       	std	Y+11, r24	; 0x0b
    2cf4:	9c 87       	std	Y+12, r25	; 0x0c
    2cf6:	ad 87       	std	Y+13, r26	; 0x0d
    2cf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a e7       	ldi	r20, 0x7A	; 122
    2d08:	53 e4       	ldi	r21, 0x43	; 67
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8f 83       	std	Y+7, r24	; 0x07
    2d14:	98 87       	std	Y+8, r25	; 0x08
    2d16:	a9 87       	std	Y+9, r26	; 0x09
    2d18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d2e:	88 23       	and	r24, r24
    2d30:	2c f4       	brge	.+10     	; 0x2d3c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	3f c0       	rjmp	.+126    	; 0x2dba <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	4c f5       	brge	.+82     	; 0x2da6 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <LCD_displayCharacter+0x39a>
    2d7e:	89 e1       	ldi	r24, 0x19	; 25
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LCD_displayCharacter+0x388>
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d92:	8d 81       	ldd	r24, Y+5	; 0x05
    2d94:	9e 81       	ldd	r25, Y+6	; 0x06
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	69 f7       	brne	.-38     	; 0x2d7e <LCD_displayCharacter+0x37c>
    2da4:	14 c0       	rjmp	.+40     	; 0x2dce <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <LCD_displayCharacter+0x3c4>
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2dce:	e9 96       	adiw	r28, 0x39	; 57
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <LCD_displayString+0x6>
    2de6:	0f 92       	push	r0
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	9b 83       	std	Y+3, r25	; 0x03
    2dee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2df0:	19 82       	std	Y+1, r1	; 0x01
    2df2:	0e c0       	rjmp	.+28     	; 0x2e10 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	fc 01       	movw	r30, r24
    2e00:	e2 0f       	add	r30, r18
    2e02:	f3 1f       	adc	r31, r19
    2e04:	80 81       	ld	r24, Z
    2e06:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayCharacter>
		i++;
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e2 0f       	add	r30, r18
    2e1e:	f3 1f       	adc	r31, r19
    2e20:	80 81       	ld	r24, Z
    2e22:	88 23       	and	r24, r24
    2e24:	39 f7       	brne	.-50     	; 0x2df4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <LCD_moveCursor+0x6>
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <LCD_moveCursor+0x8>
    2e3a:	0f 92       	push	r0
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	8a 83       	std	Y+2, r24	; 0x02
    2e42:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	28 2f       	mov	r18, r24
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	3d 83       	std	Y+5, r19	; 0x05
    2e4c:	2c 83       	std	Y+4, r18	; 0x04
    2e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e50:	9d 81       	ldd	r25, Y+5	; 0x05
    2e52:	81 30       	cpi	r24, 0x01	; 1
    2e54:	91 05       	cpc	r25, r1
    2e56:	c1 f0       	breq	.+48     	; 0x2e88 <LCD_moveCursor+0x56>
    2e58:	2c 81       	ldd	r18, Y+4	; 0x04
    2e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2e5c:	22 30       	cpi	r18, 0x02	; 2
    2e5e:	31 05       	cpc	r19, r1
    2e60:	2c f4       	brge	.+10     	; 0x2e6c <LCD_moveCursor+0x3a>
    2e62:	8c 81       	ldd	r24, Y+4	; 0x04
    2e64:	9d 81       	ldd	r25, Y+5	; 0x05
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	61 f0       	breq	.+24     	; 0x2e82 <LCD_moveCursor+0x50>
    2e6a:	19 c0       	rjmp	.+50     	; 0x2e9e <LCD_moveCursor+0x6c>
    2e6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e70:	22 30       	cpi	r18, 0x02	; 2
    2e72:	31 05       	cpc	r19, r1
    2e74:	69 f0       	breq	.+26     	; 0x2e90 <LCD_moveCursor+0x5e>
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7a:	83 30       	cpi	r24, 0x03	; 3
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	61 f0       	breq	.+24     	; 0x2e98 <LCD_moveCursor+0x66>
    2e80:	0e c0       	rjmp	.+28     	; 0x2e9e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	0b c0       	rjmp	.+22     	; 0x2e9e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	80 5c       	subi	r24, 0xC0	; 192
    2e8c:	89 83       	std	Y+1, r24	; 0x01
    2e8e:	07 c0       	rjmp	.+14     	; 0x2e9e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	80 5f       	subi	r24, 0xF0	; 240
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	80 5b       	subi	r24, 0xB0	; 176
    2e9c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	80 68       	ori	r24, 0x80	; 128
    2ea2:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_sendCommand>
}
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <LCD_displayStringRowColumn+0x6>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <LCD_displayStringRowColumn+0x8>
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	6a 83       	std	Y+2, r22	; 0x02
    2ec6:	5c 83       	std	Y+4, r21	; 0x04
    2ec8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	6a 81       	ldd	r22, Y+2	; 0x02
    2ece:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_displayString>
}
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	62 97       	sbiw	r28, 0x12	; 18
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f00:	89 89       	ldd	r24, Y+17	; 0x11
    2f02:	9a 89       	ldd	r25, Y+18	; 0x12
    2f04:	9e 01       	movw	r18, r28
    2f06:	2f 5f       	subi	r18, 0xFF	; 255
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	4a e0       	ldi	r20, 0x0A	; 10
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	0e 94 0a 1a 	call	0x3414	; 0x3414 <itoa>
   LCD_displayString(buff); /* Display the string */
    2f14:	ce 01       	movw	r24, r28
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_displayString>
}
    2f1c:	62 96       	adiw	r28, 0x12	; 18
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_sendCommand>
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR (TIMER1_OVF_vect)
{
    2f42:	1f 92       	push	r1
    2f44:	0f 92       	push	r0
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	0f 92       	push	r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	2f 93       	push	r18
    2f4e:	3f 93       	push	r19
    2f50:	4f 93       	push	r20
    2f52:	5f 93       	push	r21
    2f54:	6f 93       	push	r22
    2f56:	7f 93       	push	r23
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2f6c:	80 91 62 01 	lds	r24, 0x0162
    2f70:	90 91 63 01 	lds	r25, 0x0163
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	29 f0       	breq	.+10     	; 0x2f82 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    2f78:	e0 91 62 01 	lds	r30, 0x0162
    2f7c:	f0 91 63 01 	lds	r31, 0x0163
    2f80:	09 95       	icall
	}
}
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	ff 91       	pop	r31
    2f88:	ef 91       	pop	r30
    2f8a:	bf 91       	pop	r27
    2f8c:	af 91       	pop	r26
    2f8e:	9f 91       	pop	r25
    2f90:	8f 91       	pop	r24
    2f92:	7f 91       	pop	r23
    2f94:	6f 91       	pop	r22
    2f96:	5f 91       	pop	r21
    2f98:	4f 91       	pop	r20
    2f9a:	3f 91       	pop	r19
    2f9c:	2f 91       	pop	r18
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <__vector_7>:

ISR (TIMER1_COMPA_vect)
{
    2fa8:	1f 92       	push	r1
    2faa:	0f 92       	push	r0
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	0f 92       	push	r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	2f 93       	push	r18
    2fb4:	3f 93       	push	r19
    2fb6:	4f 93       	push	r20
    2fb8:	5f 93       	push	r21
    2fba:	6f 93       	push	r22
    2fbc:	7f 93       	push	r23
    2fbe:	8f 93       	push	r24
    2fc0:	9f 93       	push	r25
    2fc2:	af 93       	push	r26
    2fc4:	bf 93       	push	r27
    2fc6:	ef 93       	push	r30
    2fc8:	ff 93       	push	r31
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2fd2:	80 91 62 01 	lds	r24, 0x0162
    2fd6:	90 91 63 01 	lds	r25, 0x0163
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	29 f0       	breq	.+10     	; 0x2fe8 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    2fde:	e0 91 62 01 	lds	r30, 0x0162
    2fe2:	f0 91 63 01 	lds	r31, 0x0163
    2fe6:	09 95       	icall
	}
}
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	ff 91       	pop	r31
    2fee:	ef 91       	pop	r30
    2ff0:	bf 91       	pop	r27
    2ff2:	af 91       	pop	r26
    2ff4:	9f 91       	pop	r25
    2ff6:	8f 91       	pop	r24
    2ff8:	7f 91       	pop	r23
    2ffa:	6f 91       	pop	r22
    2ffc:	5f 91       	pop	r21
    2ffe:	4f 91       	pop	r20
    3000:	3f 91       	pop	r19
    3002:	2f 91       	pop	r18
    3004:	0f 90       	pop	r0
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	0f 90       	pop	r0
    300a:	1f 90       	pop	r1
    300c:	18 95       	reti

0000300e <Timer1_init>:
/*
 * Description:
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <Timer1_init+0x6>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A);
    301c:	ef e4       	ldi	r30, 0x4F	; 79
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	88 e0       	ldi	r24, 0x08	; 8
    3022:	80 83       	st	Z, r24
	/* put initial value of timer1 in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;
    3024:	ac e4       	ldi	r26, 0x4C	; 76
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e9 81       	ldd	r30, Y+1	; 0x01
    302a:	fa 81       	ldd	r31, Y+2	; 0x02
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	9c 93       	st	X, r25
    3034:	8e 93       	st	-X, r24

	/* Insert first two bits of Timer1_Mode in first two bits in TCCR1A */
	TCCR1A = ( TCCR1A & 0xFC ) | ( Config_Ptr->mode & 0x03);
    3036:	af e4       	ldi	r26, 0x4F	; 79
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	ef e4       	ldi	r30, 0x4F	; 79
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	98 2f       	mov	r25, r24
    3042:	9c 7f       	andi	r25, 0xFC	; 252
    3044:	e9 81       	ldd	r30, Y+1	; 0x01
    3046:	fa 81       	ldd	r31, Y+2	; 0x02
    3048:	85 81       	ldd	r24, Z+5	; 0x05
    304a:	83 70       	andi	r24, 0x03	; 3
    304c:	89 2b       	or	r24, r25
    304e:	8c 93       	st	X, r24

	/*Insert bit-3 and bit-2 of Timer1_Mode in bit-4 and bit-3 bit in TCCR1B */
	TCCR1A = (TCCR1A & 0xE7) | ( (Config_Ptr->mode & 0x0C) <<1);
    3050:	af e4       	ldi	r26, 0x4F	; 79
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	ef e4       	ldi	r30, 0x4F	; 79
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	28 2f       	mov	r18, r24
    305c:	27 7e       	andi	r18, 0xE7	; 231
    305e:	e9 81       	ldd	r30, Y+1	; 0x01
    3060:	fa 81       	ldd	r31, Y+2	; 0x02
    3062:	85 81       	ldd	r24, Z+5	; 0x05
    3064:	88 2f       	mov	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	8c 70       	andi	r24, 0x0C	; 12
    306a:	90 70       	andi	r25, 0x00	; 0
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	82 2b       	or	r24, r18
    3072:	8c 93       	st	X, r24

	/*Insert timer1_prescalar value in first three bits of TCCR1A */
	TCCR1B = (TCCR1B & 0XF8) | ( Config_Ptr->prescaler & 0x07);
    3074:	ae e4       	ldi	r26, 0x4E	; 78
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	ee e4       	ldi	r30, 0x4E	; 78
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	98 2f       	mov	r25, r24
    3080:	98 7f       	andi	r25, 0xF8	; 248
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	84 81       	ldd	r24, Z+4	; 0x04
    3088:	87 70       	andi	r24, 0x07	; 7
    308a:	89 2b       	or	r24, r25
    308c:	8c 93       	st	X, r24

	/*
	 * put compare value of timer1 in OCR1A and enable OCIE1A for compare match
	 * interrupt, when working in CTC mode
	 */
	if(Config_Ptr->mode == CTC_OCR1A)
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	85 81       	ldd	r24, Z+5	; 0x05
    3094:	84 30       	cpi	r24, 0x04	; 4
    3096:	89 f4       	brne	.+34     	; 0x30ba <Timer1_init+0xac>
	{
		OCR1A = Config_Ptr->compare_value;
    3098:	aa e4       	ldi	r26, 0x4A	; 74
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e9 81       	ldd	r30, Y+1	; 0x01
    309e:	fa 81       	ldd	r31, Y+2	; 0x02
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	9c 93       	st	X, r25
    30a8:	8e 93       	st	-X, r24
		SET_BIT (TIMSK, OCIE1A);
    30aa:	a9 e5       	ldi	r26, 0x59	; 89
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e9 e5       	ldi	r30, 0x59	; 89
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	80 61       	ori	r24, 0x10	; 16
    30b6:	8c 93       	st	X, r24
    30b8:	0c c0       	rjmp	.+24     	; 0x30d2 <Timer1_init+0xc4>
	}
	else if(Config_Ptr->mode == NORMAL)
    30ba:	e9 81       	ldd	r30, Y+1	; 0x01
    30bc:	fa 81       	ldd	r31, Y+2	; 0x02
    30be:	85 81       	ldd	r24, Z+5	; 0x05
    30c0:	88 23       	and	r24, r24
    30c2:	39 f4       	brne	.+14     	; 0x30d2 <Timer1_init+0xc4>
	{
		/* Enable overflow interrupt enable when working in normal mode */
		SET_BIT(TIMSK, TOIE1);
    30c4:	a9 e5       	ldi	r26, 0x59	; 89
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e9 e5       	ldi	r30, 0x59	; 89
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	84 60       	ori	r24, 0x04	; 4
    30d0:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing */
	}
}
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <Timer1_deInit>:
/*
 * Description:
 * Function to disable the Timer driver
 */
void Timer1_deInit(void)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
	/* Stop timer1 by clearing CS12:0 in TCCR1B*/
	TCCR1B=0;
    30e4:	ee e4       	ldi	r30, 0x4E	; 78
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	10 82       	st	Z, r1
}
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <Timer1_setCallBack+0x6>
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	90 93 63 01 	sts	0x0163, r25
    3106:	80 93 62 01 	sts	0x0162, r24
}
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	00 d0       	rcall	.+0      	; 0x311a <UART_init+0x6>
    311a:	00 d0       	rcall	.+0      	; 0x311c <UART_init+0x8>
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	9c 83       	std	Y+4, r25	; 0x04
    3122:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3124:	1a 82       	std	Y+2, r1	; 0x02
    3126:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3128:	eb e2       	ldi	r30, 0x2B	; 43
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3130:	ea e2       	ldi	r30, 0x2A	; 42
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	88 e1       	ldi	r24, 0x18	; 24
    3136:	80 83       	st	Z, r24
	/* insert UCSZ2 bit from bit_data */
	UCSRB = (UCSRB & 0XFB) | ( Config_Ptr->bit_data & 0x04 );
    3138:	aa e2       	ldi	r26, 0x2A	; 42
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	ea e2       	ldi	r30, 0x2A	; 42
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	98 2f       	mov	r25, r24
    3144:	9b 7f       	andi	r25, 0xFB	; 251
    3146:	eb 81       	ldd	r30, Y+3	; 0x03
    3148:	fc 81       	ldd	r31, Y+4	; 0x04
    314a:	80 81       	ld	r24, Z
    314c:	84 70       	andi	r24, 0x04	; 4
    314e:	89 2b       	or	r24, r25
    3150:	8c 93       	st	X, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 * Insert the rest of the bits from Config_Ptr
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3152:	e0 e4       	ldi	r30, 0x40	; 64
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	80 83       	st	Z, r24

	/* Insert bit_data in second and third bit in UCSRA */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->bit_data & 0x03) << 1);
    315a:	a0 e4       	ldi	r26, 0x40	; 64
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e0 e4       	ldi	r30, 0x40	; 64
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	28 2f       	mov	r18, r24
    3166:	29 7f       	andi	r18, 0xF9	; 249
    3168:	eb 81       	ldd	r30, Y+3	; 0x03
    316a:	fc 81       	ldd	r31, Y+4	; 0x04
    316c:	80 81       	ld	r24, Z
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	83 70       	andi	r24, 0x03	; 3
    3174:	90 70       	andi	r25, 0x00	; 0
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	82 2b       	or	r24, r18
    317c:	8c 93       	st	X, r24
	
	/* Insert Parity in 5th and 4th bit in UCSRA */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr->parity & 0x03) << 4);
    317e:	a0 e4       	ldi	r26, 0x40	; 64
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e0 e4       	ldi	r30, 0x40	; 64
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	28 2f       	mov	r18, r24
    318a:	2f 7c       	andi	r18, 0xCF	; 207
    318c:	eb 81       	ldd	r30, Y+3	; 0x03
    318e:	fc 81       	ldd	r31, Y+4	; 0x04
    3190:	81 81       	ldd	r24, Z+1	; 0x01
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	83 70       	andi	r24, 0x03	; 3
    3198:	90 70       	andi	r25, 0x00	; 0
    319a:	82 95       	swap	r24
    319c:	92 95       	swap	r25
    319e:	90 7f       	andi	r25, 0xF0	; 240
    31a0:	98 27       	eor	r25, r24
    31a2:	80 7f       	andi	r24, 0xF0	; 240
    31a4:	98 27       	eor	r25, r24
    31a6:	82 2b       	or	r24, r18
    31a8:	8c 93       	st	X, r24

	/* Insert stob_bit in third bit in UCSRA */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr->stop_bit & 0x01) <<3);
    31aa:	a0 e4       	ldi	r26, 0x40	; 64
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e0 e4       	ldi	r30, 0x40	; 64
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	28 2f       	mov	r18, r24
    31b6:	27 7f       	andi	r18, 0xF7	; 247
    31b8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ba:	fc 81       	ldd	r31, Y+4	; 0x04
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	88 2f       	mov	r24, r24
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	81 70       	andi	r24, 0x01	; 1
    31c4:	90 70       	andi	r25, 0x00	; 0
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	88 0f       	add	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	82 2b       	or	r24, r18
    31d4:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    31d6:	eb 81       	ldd	r30, Y+3	; 0x03
    31d8:	fc 81       	ldd	r31, Y+4	; 0x04
    31da:	83 81       	ldd	r24, Z+3	; 0x03
    31dc:	94 81       	ldd	r25, Z+4	; 0x04
    31de:	cc 01       	movw	r24, r24
    31e0:	a0 e0       	ldi	r26, 0x00	; 0
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	aa 1f       	adc	r26, r26
    31f2:	bb 1f       	adc	r27, r27
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	9c 01       	movw	r18, r24
    31fe:	ad 01       	movw	r20, r26
    3200:	80 e4       	ldi	r24, 0x40	; 64
    3202:	92 e4       	ldi	r25, 0x42	; 66
    3204:	af e0       	ldi	r26, 0x0F	; 15
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	0e 94 b1 19 	call	0x3362	; 0x3362 <__udivmodsi4>
    3210:	da 01       	movw	r26, r20
    3212:	c9 01       	movw	r24, r18
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    321a:	e0 e4       	ldi	r30, 0x40	; 64
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	89 2f       	mov	r24, r25
    3224:	99 27       	eor	r25, r25
    3226:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3228:	e9 e2       	ldi	r30, 0x29	; 41
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	80 83       	st	Z, r24
}
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	0f 92       	push	r0
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    324a:	eb e2       	ldi	r30, 0x2B	; 43
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	88 2f       	mov	r24, r24
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	80 72       	andi	r24, 0x20	; 32
    3256:	90 70       	andi	r25, 0x00	; 0
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	b9 f3       	breq	.-18     	; 0x324a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    325c:	ec e2       	ldi	r30, 0x2C	; 44
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3264:	0f 90       	pop	r0
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3274:	eb e2       	ldi	r30, 0x2B	; 43
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	88 23       	and	r24, r24
    327c:	dc f7       	brge	.-10     	; 0x3274 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    327e:	ec e2       	ldi	r30, 0x2C	; 44
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
}
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	00 d0       	rcall	.+0      	; 0x3290 <UART_sendString+0x6>
    3290:	0f 92       	push	r0
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	9b 83       	std	Y+3, r25	; 0x03
    3298:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    329a:	19 82       	std	Y+1, r1	; 0x01
    329c:	0e c0       	rjmp	.+28     	; 0x32ba <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	9b 81       	ldd	r25, Y+3	; 0x03
    32a8:	fc 01       	movw	r30, r24
    32aa:	e2 0f       	add	r30, r18
    32ac:	f3 1f       	adc	r31, r19
    32ae:	80 81       	ld	r24, Z
    32b0:	0e 94 1f 19 	call	0x323e	; 0x323e <UART_sendByte>
		i++;
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	8f 5f       	subi	r24, 0xFF	; 255
    32b8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	28 2f       	mov	r18, r24
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	9b 81       	ldd	r25, Y+3	; 0x03
    32c4:	fc 01       	movw	r30, r24
    32c6:	e2 0f       	add	r30, r18
    32c8:	f3 1f       	adc	r31, r19
    32ca:	80 81       	ld	r24, Z
    32cc:	88 23       	and	r24, r24
    32ce:	39 f7       	brne	.-50     	; 0x329e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    32dc:	0f 93       	push	r16
    32de:	1f 93       	push	r17
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <UART_receiveString+0xa>
    32e6:	0f 92       	push	r0
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	9b 83       	std	Y+3, r25	; 0x03
    32ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32f0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	28 2f       	mov	r18, r24
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	9b 81       	ldd	r25, Y+3	; 0x03
    32fc:	8c 01       	movw	r16, r24
    32fe:	02 0f       	add	r16, r18
    3300:	13 1f       	adc	r17, r19
    3302:	0e 94 36 19 	call	0x326c	; 0x326c <UART_receiveByte>
    3306:	f8 01       	movw	r30, r16
    3308:	80 83       	st	Z, r24
    330a:	0f c0       	rjmp	.+30     	; 0x332a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	9b 81       	ldd	r25, Y+3	; 0x03
    331c:	8c 01       	movw	r16, r24
    331e:	02 0f       	add	r16, r18
    3320:	13 1f       	adc	r17, r19
    3322:	0e 94 36 19 	call	0x326c	; 0x326c <UART_receiveByte>
    3326:	f8 01       	movw	r30, r16
    3328:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	8a 81       	ldd	r24, Y+2	; 0x02
    3332:	9b 81       	ldd	r25, Y+3	; 0x03
    3334:	fc 01       	movw	r30, r24
    3336:	e2 0f       	add	r30, r18
    3338:	f3 1f       	adc	r31, r19
    333a:	80 81       	ld	r24, Z
    333c:	83 32       	cpi	r24, 0x23	; 35
    333e:	31 f7       	brne	.-52     	; 0x330c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	fc 01       	movw	r30, r24
    334c:	e2 0f       	add	r30, r18
    334e:	f3 1f       	adc	r31, r19
    3350:	10 82       	st	Z, r1
}
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	08 95       	ret

00003362 <__udivmodsi4>:
    3362:	a1 e2       	ldi	r26, 0x21	; 33
    3364:	1a 2e       	mov	r1, r26
    3366:	aa 1b       	sub	r26, r26
    3368:	bb 1b       	sub	r27, r27
    336a:	fd 01       	movw	r30, r26
    336c:	0d c0       	rjmp	.+26     	; 0x3388 <__udivmodsi4_ep>

0000336e <__udivmodsi4_loop>:
    336e:	aa 1f       	adc	r26, r26
    3370:	bb 1f       	adc	r27, r27
    3372:	ee 1f       	adc	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	a2 17       	cp	r26, r18
    3378:	b3 07       	cpc	r27, r19
    337a:	e4 07       	cpc	r30, r20
    337c:	f5 07       	cpc	r31, r21
    337e:	20 f0       	brcs	.+8      	; 0x3388 <__udivmodsi4_ep>
    3380:	a2 1b       	sub	r26, r18
    3382:	b3 0b       	sbc	r27, r19
    3384:	e4 0b       	sbc	r30, r20
    3386:	f5 0b       	sbc	r31, r21

00003388 <__udivmodsi4_ep>:
    3388:	66 1f       	adc	r22, r22
    338a:	77 1f       	adc	r23, r23
    338c:	88 1f       	adc	r24, r24
    338e:	99 1f       	adc	r25, r25
    3390:	1a 94       	dec	r1
    3392:	69 f7       	brne	.-38     	; 0x336e <__udivmodsi4_loop>
    3394:	60 95       	com	r22
    3396:	70 95       	com	r23
    3398:	80 95       	com	r24
    339a:	90 95       	com	r25
    339c:	9b 01       	movw	r18, r22
    339e:	ac 01       	movw	r20, r24
    33a0:	bd 01       	movw	r22, r26
    33a2:	cf 01       	movw	r24, r30
    33a4:	08 95       	ret

000033a6 <__prologue_saves__>:
    33a6:	2f 92       	push	r2
    33a8:	3f 92       	push	r3
    33aa:	4f 92       	push	r4
    33ac:	5f 92       	push	r5
    33ae:	6f 92       	push	r6
    33b0:	7f 92       	push	r7
    33b2:	8f 92       	push	r8
    33b4:	9f 92       	push	r9
    33b6:	af 92       	push	r10
    33b8:	bf 92       	push	r11
    33ba:	cf 92       	push	r12
    33bc:	df 92       	push	r13
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	ca 1b       	sub	r28, r26
    33d0:	db 0b       	sbc	r29, r27
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	de bf       	out	0x3e, r29	; 62
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	cd bf       	out	0x3d, r28	; 61
    33dc:	09 94       	ijmp

000033de <__epilogue_restores__>:
    33de:	2a 88       	ldd	r2, Y+18	; 0x12
    33e0:	39 88       	ldd	r3, Y+17	; 0x11
    33e2:	48 88       	ldd	r4, Y+16	; 0x10
    33e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    33e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    33ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    33ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    33f0:	b9 84       	ldd	r11, Y+9	; 0x09
    33f2:	c8 84       	ldd	r12, Y+8	; 0x08
    33f4:	df 80       	ldd	r13, Y+7	; 0x07
    33f6:	ee 80       	ldd	r14, Y+6	; 0x06
    33f8:	fd 80       	ldd	r15, Y+5	; 0x05
    33fa:	0c 81       	ldd	r16, Y+4	; 0x04
    33fc:	1b 81       	ldd	r17, Y+3	; 0x03
    33fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3400:	b9 81       	ldd	r27, Y+1	; 0x01
    3402:	ce 0f       	add	r28, r30
    3404:	d1 1d       	adc	r29, r1
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	ed 01       	movw	r28, r26
    3412:	08 95       	ret

00003414 <itoa>:
    3414:	fb 01       	movw	r30, r22
    3416:	9f 01       	movw	r18, r30
    3418:	e8 94       	clt
    341a:	42 30       	cpi	r20, 0x02	; 2
    341c:	c4 f0       	brlt	.+48     	; 0x344e <itoa+0x3a>
    341e:	45 32       	cpi	r20, 0x25	; 37
    3420:	b4 f4       	brge	.+44     	; 0x344e <itoa+0x3a>
    3422:	4a 30       	cpi	r20, 0x0A	; 10
    3424:	29 f4       	brne	.+10     	; 0x3430 <itoa+0x1c>
    3426:	97 fb       	bst	r25, 7
    3428:	1e f4       	brtc	.+6      	; 0x3430 <itoa+0x1c>
    342a:	90 95       	com	r25
    342c:	81 95       	neg	r24
    342e:	9f 4f       	sbci	r25, 0xFF	; 255
    3430:	64 2f       	mov	r22, r20
    3432:	77 27       	eor	r23, r23
    3434:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__udivmodhi4>
    3438:	80 5d       	subi	r24, 0xD0	; 208
    343a:	8a 33       	cpi	r24, 0x3A	; 58
    343c:	0c f0       	brlt	.+2      	; 0x3440 <itoa+0x2c>
    343e:	89 5d       	subi	r24, 0xD9	; 217
    3440:	81 93       	st	Z+, r24
    3442:	cb 01       	movw	r24, r22
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	a1 f7       	brne	.-24     	; 0x3430 <itoa+0x1c>
    3448:	16 f4       	brtc	.+4      	; 0x344e <itoa+0x3a>
    344a:	5d e2       	ldi	r21, 0x2D	; 45
    344c:	51 93       	st	Z+, r21
    344e:	10 82       	st	Z, r1
    3450:	c9 01       	movw	r24, r18
    3452:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <strrev>

00003456 <strrev>:
    3456:	dc 01       	movw	r26, r24
    3458:	fc 01       	movw	r30, r24
    345a:	67 2f       	mov	r22, r23
    345c:	71 91       	ld	r23, Z+
    345e:	77 23       	and	r23, r23
    3460:	e1 f7       	brne	.-8      	; 0x345a <strrev+0x4>
    3462:	32 97       	sbiw	r30, 0x02	; 2
    3464:	04 c0       	rjmp	.+8      	; 0x346e <strrev+0x18>
    3466:	7c 91       	ld	r23, X
    3468:	6d 93       	st	X+, r22
    346a:	70 83       	st	Z, r23
    346c:	62 91       	ld	r22, -Z
    346e:	ae 17       	cp	r26, r30
    3470:	bf 07       	cpc	r27, r31
    3472:	c8 f3       	brcs	.-14     	; 0x3466 <strrev+0x10>
    3474:	08 95       	ret

00003476 <__udivmodhi4>:
    3476:	aa 1b       	sub	r26, r26
    3478:	bb 1b       	sub	r27, r27
    347a:	51 e1       	ldi	r21, 0x11	; 17
    347c:	07 c0       	rjmp	.+14     	; 0x348c <__udivmodhi4_ep>

0000347e <__udivmodhi4_loop>:
    347e:	aa 1f       	adc	r26, r26
    3480:	bb 1f       	adc	r27, r27
    3482:	a6 17       	cp	r26, r22
    3484:	b7 07       	cpc	r27, r23
    3486:	10 f0       	brcs	.+4      	; 0x348c <__udivmodhi4_ep>
    3488:	a6 1b       	sub	r26, r22
    348a:	b7 0b       	sbc	r27, r23

0000348c <__udivmodhi4_ep>:
    348c:	88 1f       	adc	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	5a 95       	dec	r21
    3492:	a9 f7       	brne	.-22     	; 0x347e <__udivmodhi4_loop>
    3494:	80 95       	com	r24
    3496:	90 95       	com	r25
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	08 95       	ret

0000349e <_exit>:
    349e:	f8 94       	cli

000034a0 <__stop_program>:
    34a0:	ff cf       	rjmp	.-2      	; 0x34a0 <__stop_program>
