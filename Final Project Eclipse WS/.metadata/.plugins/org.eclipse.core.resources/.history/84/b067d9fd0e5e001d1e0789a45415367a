/*
 * HMI_ECU.c
 * Author: SHAHD MOHAMED
 */

#include "HMI_header.h"

/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/

extern volatile uint8 open_flag;
extern volatile uint8 stop_flag;
extern volatile uint8 close_flag;
extern volatile uint8 stop_buzzer;

/*******************************************************************************
 *                               HMI ECU MAIN                                  *
 *******************************************************************************/


int main()
{
	/*
	    UART_Config.baud_rate= 9600;
		UART_Config.bit_data = EIGHT_BIT_FRAME;
		UART_Config.parity= DISABLE_PARITY;
		UART_Config.stop_bit=ONE_STOP_BIT;
	 */
	UART_ConfigType config_UART = {EIGHT_BIT_FRAME, DISABLE_PARITY, ONE_STOP_BIT, 9600};


	/*
     Configure Timer1_Config variables to count 3 seconds in one interrupts from CTC mode
	g_Timer1Config.initial_value=0;      ----> value counter starts counting from
	g_Timer1Config.compare_value=46836;  ----> setting value of compare match register of timer1
	g_Timer1Config.mode=CTC_OCR1A;       ----> configure timer1 to work in compare mode using channel A
	g_Timer1Config.prescaler= F_CPU_64;  ----> use prescaler of 1024
	 */
	Timer1_ConfigType Timer1_Config_Motor = {0,46875,F_CPU_64, CTC_OCR1A};


	/* Configure Timer1_Config variables to count 1_minute through 7 interrupts from timer1 Normal mode
	 g_Timer1Config.initial_value=0;      ----> value counter starts counting from
     g_Timer1Config.compare_value=58536;  ----> setting value of compare match register of timer1
	 g_Timer1Config.mode= CTC_OCR1A;      ----> configure timer1 to work in compare mode using channel A
	 g_Timer1Config.prescaler= F_CPU_1024;----> use prescaler of 1024
	 */
	Timer1_ConfigType Timer1_Config_Buzzer = {0,58536,F_CPU_1024,CTC_OCR1A};

	uint8 state = SETTING_NEW_PASSWORD; /* variable to carry which state to controllers are working in*/

	/* variable carrying result of comparing confirm password with new pass when setting new password
	 * and comparing entered password with one of the system when requesting to open the door or change password
	 */
	uint8 passwordsMatchFlag = WRONG_PASS;

	uint8 g_enterPassMaxTrials = 0; /* variable to count number of consecutive wrong password entered by the user*/


	/*enable lcd driver*/
	LCD_init();

	/*enable UART driver*/
	UART_init(&config_UART);

	/*Enable global interrupt*/
	sei();

	while(1)
	{
		/* setting a password for the system or user requires changing password*/
		while((state == SETTING_NEW_PASSWORD) && (passwordsMatchFlag == WRONG_PASS))
		{
			/* entering two passwords and sending them to Control_ECU*/
			HMI_settingNewPassword();

			UART_sendByte(READY_TO_COMMUNICATE); /* informing Conrol_ECU to send data now*/
			passwordsMatchFlag=UART_receiveByte(); /* receive flag indicating if two passwords matched*/

			LCD_clearScreen();
			if(passwordsMatchFlag == MATCH)
			{
				/*Do Nothing*/
			}
			else
			{
				LCD_displayStringRowColumn(0,0, "Not matching");
				state = SETTING_NEW_PASSWORD;
				passwordsMatchFlag = WRONG_PASS;
				_delay_ms(500);
			}

		}

		/*After setting the new password the main menu starts to display
		 * press '+' --> the door will open for 15, stop for 3 sec and then close for 15 sec
		 * press '-'--> Change password
		 */
		state = HMI_mainOptions();

		if(state == STEP_3_OPEN_DOOR)
		{
			while(1)
			{
				passwordsMatchFlag = HMI_getPassword();
				if(passwordsMatchFlag == MATCH)
				{
					/* start timer1 with the selected configuration */
					Timer1_init(&Timer1_Config_Motor);

					/*set call back function of timer1 */
					Timer1_setCallBack(Controling_LCD_openDoorState);

					g_enterPassMaxTrials = 0;

                    /* display door state on the LCD*/
					LCD_clearScreen();
					LCD_displayStringRowColumn(0,0,"Door is opening ");
					while(open_flag != 1);

					//				stop_flag=0;
					LCD_displayStringRowColumn(0,0,"Door not moving");
					while(stop_flag != 1);


					//				close_flag = 0;
					LCD_clearScreen();
					LCD_displayStringRowColumn(0,0,"Door is closing");
					while(close_flag != 1);

					/*stop timer1 */
					Timer1_deInit();

					/* clear door controlling flags */
					open_flag = 0;
					close_flag = 0;
					stop_flag=0;
					break; /* break from loop after entering password correctly and opening door*/

				}
				else if (passwordsMatchFlag == NOT_MATCHING)
				{
					g_enterPassMaxTrials++;
					if(g_enterPassMaxTrials >= 3)
					{

						Timer1_setCallBack(HMI_buzzerProcessing);
						Timer1_init(&Timer1_Config_Buzzer);

						/*display error message*/
						LCD_clearScreen();
						LCD_displayStringRowColumn(0,0,"ERROR, please");
						LCD_displayStringRowColumn(1,0,"wait 1 min");
						while(stop_buzzer != 1);


						Timer1_deInit(); /*stop timer*/
						stop_buzzer = 0;
						break; /* break from the loop after setting alarm for 1 minute to go to main options again*/
					}
					else
					{
						LCD_displayStringRowColumn(0,0, "Incorrect Pass");

						/*start communication with Control_ECU, to take password and check it from user again*/
						UART_sendByte(READY_TO_COMMUNICATE);
						UART_sendByte(STEP_3_OPEN_DOOR);

						_delay_ms(500);
					}
				}
			}
		}
		else if (state == STEP_3_CHANGE_PASS)
		{
			while(1)
			{
				passwordsMatchFlag = HMI_getPassword();
				if(passwordsMatchFlag == MATCH)
				{
					/* clear g_enterPassMaxTrials (counter of consecutive wrong passwords)*/
					g_enterPassMaxTrials = 0;

					/* configure state and passwordsMatchFlag variable to go to step_1 */
					state = SETTING_NEW_PASSWORD;
					passwordsMatchFlag = WRONG_PASS;
					break;
				}
				else if (passwordsMatchFlag == NOT_MATCHING)
				{
					g_enterPassMaxTrials++;

					if(g_enterPassMaxTrials >= 3)
					{
						Timer1_setCallBack(HMI_buzzerProcessing);
						Timer1_init(&Timer1_Config_Buzzer);

						/* display error message for 1 minute*/
						LCD_clearScreen();
						LCD_displayStringRowColumn(0,0,"ERROR, please");
						LCD_displayStringRowColumn(1,0,"wait 1 min");
						while(stop_buzzer != 1);

						LCD_clearScreen();

						Timer1_deInit();  /* stop timer*/
						stop_buzzer = 0;  /* clear buzzer flag*/
						break; /* break from the loop after setting alarm for 1 minute to go to main options again*/
					}
					else
					{
						LCD_displayStringRowColumn(0,0, "Incorrect Pass");

						/*start communication with Control_ECU, to take password and check it from user again*/
						UART_sendByte(READY_TO_COMMUNICATE);
						UART_sendByte(STEP_3_CHANGE_PASS);

						_delay_ms(500);
					}
				}
			}
		}

	}
}

