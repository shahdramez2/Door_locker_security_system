/*
 * timer1.c
 *
 *  Created on: Nov 1, 2022
 *      Author: SHAHD MOHAMED
 */

#include"timer1.h"
#include"common_macros.h"
#include<avr/io.h>
#include<avr/interrupt.h>


Timer1_ConfigType Config = {0, 5, F_CPU_8, NORMAL};

/*******************************************************************************
 *                         Global Variables                                    *
 *******************************************************************************/

static volatile void (*g_callBackPtr)(void);

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*
 * Description:
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
	/* put initial value of timer1 in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;

	/* Insert first two bits of Timer1_Mode in first two bits in TCCR1A */
	TCCR1A = ( TCCR1A & 0xFA ) | ( Config_Ptr->mode & 0x03);

	/*Insert bit-3 and bit-2 of Timer1_Mode in bit-4 and bit-3 bit in TCCR1B */
	TCCR1A = (TCCR1A & 0xE7) | ( (Config_Ptr->mode & 0x0C) <<1);

	/*Insert timer1_prescalar value in first three bits of TCCR1A */
	TCCR1A = (TCCR1A & 0XF8) | ( Config_Ptr->prescaler & 0x07);

    /*
     * put compare value of timer1 in OCR1A and enable OCIE1A for compare match
     * interrupt, when working in CTC mode
     */
	if(Config_Ptr->mode == CTC_OCR1A)
	{
		OCR1A = Config_Ptr->compare_value;
		SET_BIT (TIMSK, OCIE1A);
	}
	else if(Config_Ptr->mode == NORMAL)
	{
		/* Enable overflow interrupt enable when working in normal mode */
		SET_BIT(TIMSK, TOIE1);
	}
	else
	{
		/*Do Nothing */
	}
}


/*
 * Description:
 * Function to disable the Timer driver
 */
void Timer1_deInit(void)
{
    /* Stop timer1 by clearing CS12:0 in TCCR1B*/
	TCCR1B=0;
}


/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    g_callBackPtr = a_ptr;
}

ISR (TIMER1_OVF_vect)
{
	g_callBackPtr;
}
