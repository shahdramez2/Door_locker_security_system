/*
 ============================================================================
 Name        : CONTROL_ECU.c
 Data        : 7 - 6 -2022
 Author      : Ahmed_Hossam
 Description : Security Door System
 ============================================================================
 */

#include "Control_header.h"
#include <util/delay.h>
#include <string.h>

/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/

volatile uint16 g_tick = 0;
volatile uint8 open_flag = 0;
volatile uint8 CloseDoorFlag = 0;
volatile uint8 stop_flag = 0;
volatile uint8 stop_buzzer = 0;


/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/

/*
 * Description:
 *    Function to store the password after comparing them and they are matched.
 * */
static void storePassword(char *pass_ptr)
{
	uint8 i;

	for(i = 0; i<PASSWORD_SIZE;i++)
	{
		EEPROM_writeByte(i,pass_ptr[i]);
		_delay_ms(30);
	}

}

/*
 * Description:
 * 	  1- Receive the new password.
 * 	  2- Receive the confirmation password.
 * 	  3- Compare between them.
 * 	  4- In case of the two passwords are not matched return not match.
 * 	  5- In case of the two passwords are matched return wrong.
 * */
uint8 CONTORL_step1SetNewPass(void)
{
	char password[PASSWORD_SIZE+1]; /* string to receive password*/
	char check_password[PASSWORD_SIZE+1];
	uint8 password_MatchingFlag; /* flag to check if two passwords sent match or not*/

	while(UART_receiveByte() != READY_TO_COMMUNICATE){};
	UART_receiveString(password);

	while(UART_receiveByte() != READY_TO_COMMUNICATE){};
	UART_receiveString(check_password);

	password_MatchingFlag = strcmp(password, check_password);

	if (password_MatchingFlag == 0)
	{
		/* store password in EEPROM */
		storePassword(check_password);

		while(UART_receiveByte() != READY_TO_COMMUNICATE);
		UART_sendByte(MATCH);
		return MATCH;
	}
	else
	{
		while(UART_receiveByte() != READY_TO_COMMUNICATE);
		UART_sendByte(WRONG);
		return WRONG;
	}
}

/*
 * Description:
 * 	  1- Receive the entered password.
 * 	  2- Get the stored password.
 * 	  3- Compare between them.
 * 	  4- In case of the two passwords are not matched return not match.
 * 	  5- In case of the two passwords are matched return match.
 * */
uint8 CONTROL_checkPassword(void)
{
	uint8 index;
	uint8 isMatching;
	char check;

	char enteredPassword[PASSWORD_SIZE+1];
	char storedPassword[PASSWORD_SIZE+1];

	while(UART_receiveByte() != READY_TO_COMMUNICATE);
	USART_receiveString(enteredPassword);

	for(index = 0; index < PASSWORD_SIZE; index++ )
	{
		check = EEPROM_readByte(index,&storedPassword[index]);


	}

	storedPassword[index] = '\0';

	isMatching = strcmp(enteredPassword, storedPassword);

	if(isMatching == 0)
	{
		while(UART_receiveByte() != READY_TO_COMMUNICATE);
		USART_sendByte(MATCH);
		return MATCH;
	}
	else
	{
		while(UART_receiveByte() != READY_TO_COMMUNICATE);
		USART_sendByte(NOT_MATCH);
		return NOT_MATCH;
	}
}

/*
 * Description:
 *		Function to rotate the motor to open the door
 * */
void CONTROL_motorOpen(void)
{
	DcMotor_Rotate(MOTOR_CCW);
	while(open_flag == 0);
}

/*
 * Description:
 *		Function to rotate the motor to close the door
 * */
void CONTROL_motorClose(void)
{
	DcMotor_Rotate(MOTOR_CW);
	while(CloseDoorFlag != 1);
}

/*
 * Description:
 *		Function to stop the motor.
 * */
void CONTROL_motorStop(void)
{
	DcMotor_Rotate(MOTOR_STOP);
	while(stop_flag != 1);
}

/*
 * Description:
 *		Function to rotate the motor 15 second in clockwise direction
 *		and 15 seconds in counter clockwise direction.
 * */
void CONTROL_motorProcessing(void)
{
	g_tick++;

	if(g_tick == OPEN_MOTOR_TIMER_PER_SECOND)
	{
		open_flag = 1;

	}
	else if(g_tick == CLOSE_MOTOR_TIMER_PER_SECOND)
	{

		CloseDoorFlag = 1;

	}
	else if(g_tick > CLOSE_MOTOR_TIMER_PER_SECOND)
	{
		g_tick = 0;
		stop_flag = 1;
	}
}

/*
 * Description:
 *		Function to start the alarm for 1 minute.
 * */
void CONTROL_Buzzer(void)
{
	while (1)
	{
		if(stop_buzzer > 0)
		{
			break;
		}
		else
		{
			BUZZER_start();
			for (volatile long cnt = 128000; cnt; cnt--);
		}
	}
}

/*
 * Description:
 *		Function to start buzzer and stop after one minute
 * */
void CONTROL_buzzerProcessing(void)
{
	g_tick++;

	if(g_tick == CLOSE_BUZZER_TIMER_FOR_ONE_MIN)
	{
		stop_buzzer = 1;

	}
	else if(g_tick > CLOSE_BUZZER_TIMER_FOR_ONE_MIN)
	{
		g_tick = 0;
	}
}







